# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-07-03T06:27:37+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import ConfigDict, Field, BaseModel

class ACCOMMODATIONARRANGEMENT(str, Enum):
    BOOKED = 'BOOKED'
    WITH_FAMILY = 'WITH_FAMILY'


class ADDRESSPROOFTYPE(str, Enum):
    DL = 'DL'
    RATION = 'RATION'
    ELECTRICITY = 'ELECTRICITY'
    GAS = 'GAS'
    HR_LETTER = 'HR_LETTER'
    RENTAL_NOTARY = 'RENTAL_NOTARY'
    AADHAAR = 'AADHAAR'


class ADDONSERVICEAPPOINTMENT(str, Enum):
    YES = 'YES'


class ADOSI(str, Enum):
    INSURANCE = 'INSURANCE'


class CIVILMARITALSTATUS(str, Enum):
    SINGLE = 'SINGLE'
    MARRIED = 'MARRIED'
    DIVORCED = 'DIVORCED'
    WIDOWED = 'WIDOWED'
    SEPARATED = 'SEPARATED'


class CONFIRMADDONS(str, Enum):
    YES = 'YES'


class CONFIRMAPTBOOKED(str, Enum):
    YES = 'YES'


class CONFIRMDOCSUPLOADED(str, Enum):
    YES = 'YES'


class CONFIRMUNEDITABLE(str, Enum):
    YES = 'YES'


class CONFIRMVIEWEDDATA(str, Enum):
    YES = 'YES'


class COUNTRY(str, Enum):
    INDIA = 'INDIA'
    USA = 'USA'


class COUNTRY3(str, Enum):
    AFG = 'AFG'
    ALB = 'ALB'
    DZA = 'DZA'
    ASM = 'ASM'
    AND = 'AND'
    AGO = 'AGO'
    AIA = 'AIA'
    ATA = 'ATA'
    ATG = 'ATG'
    ARG = 'ARG'
    ARM = 'ARM'
    ABW = 'ABW'
    AUS = 'AUS'
    AUT = 'AUT'
    AZE = 'AZE'
    BHS = 'BHS'
    BHR = 'BHR'
    BGD = 'BGD'
    BRB = 'BRB'
    BLR = 'BLR'
    BEL = 'BEL'
    BLZ = 'BLZ'
    BEN = 'BEN'
    BMU = 'BMU'
    BTN = 'BTN'
    BOL = 'BOL'
    BES = 'BES'
    BIH = 'BIH'
    BWA = 'BWA'
    BVT = 'BVT'
    BRA = 'BRA'
    IOT = 'IOT'
    BRN = 'BRN'
    BGR = 'BGR'
    BFA = 'BFA'
    BDI = 'BDI'
    CPV = 'CPV'
    KHM = 'KHM'
    CMR = 'CMR'
    CAN = 'CAN'
    CYM = 'CYM'
    CAF = 'CAF'
    TCD = 'TCD'
    CHL = 'CHL'
    CHN = 'CHN'
    CXR = 'CXR'
    CCK = 'CCK'
    COL = 'COL'
    COM = 'COM'
    COD = 'COD'
    COG = 'COG'
    COK = 'COK'
    CRI = 'CRI'
    HRV = 'HRV'
    CUB = 'CUB'
    CUW = 'CUW'
    CYP = 'CYP'
    CZE = 'CZE'
    CIV = 'CIV'
    DNK = 'DNK'
    DJI = 'DJI'
    DMA = 'DMA'
    DOM = 'DOM'
    ECU = 'ECU'
    EGY = 'EGY'
    SLV = 'SLV'
    GNQ = 'GNQ'
    ERI = 'ERI'
    EST = 'EST'
    SWZ = 'SWZ'
    ETH = 'ETH'
    FLK = 'FLK'
    FRO = 'FRO'
    FJI = 'FJI'
    FIN = 'FIN'
    FRA = 'FRA'
    GUF = 'GUF'
    PYF = 'PYF'
    ATF = 'ATF'
    GAB = 'GAB'
    GMB = 'GMB'
    GEO = 'GEO'
    DEU = 'DEU'
    GHA = 'GHA'
    GIB = 'GIB'
    GRC = 'GRC'
    GRL = 'GRL'
    GRD = 'GRD'
    GLP = 'GLP'
    GUM = 'GUM'
    GTM = 'GTM'
    GGY = 'GGY'
    GIN = 'GIN'
    GNB = 'GNB'
    GUY = 'GUY'
    HTI = 'HTI'
    HMD = 'HMD'
    VAT = 'VAT'
    HND = 'HND'
    HKG = 'HKG'
    HUN = 'HUN'
    ISL = 'ISL'
    IND = 'IND'
    IDN = 'IDN'
    IRN = 'IRN'
    IRQ = 'IRQ'
    IRL = 'IRL'
    IMN = 'IMN'
    ISR = 'ISR'
    ITA = 'ITA'
    JAM = 'JAM'
    JPN = 'JPN'
    JEY = 'JEY'
    JOR = 'JOR'
    KAZ = 'KAZ'
    KEN = 'KEN'
    KIR = 'KIR'
    PRK = 'PRK'
    KOR = 'KOR'
    KWT = 'KWT'
    KGZ = 'KGZ'
    LAO = 'LAO'
    LVA = 'LVA'
    LBN = 'LBN'
    LSO = 'LSO'
    LBR = 'LBR'
    LBY = 'LBY'
    LIE = 'LIE'
    LTU = 'LTU'
    LUX = 'LUX'
    MAC = 'MAC'
    MDG = 'MDG'
    MWI = 'MWI'
    MYS = 'MYS'
    MDV = 'MDV'
    MLI = 'MLI'
    MLT = 'MLT'
    MHL = 'MHL'
    MTQ = 'MTQ'
    MRT = 'MRT'
    MUS = 'MUS'
    MYT = 'MYT'
    MEX = 'MEX'
    FSM = 'FSM'
    MDA = 'MDA'
    MCO = 'MCO'
    MNG = 'MNG'
    MNE = 'MNE'
    MSR = 'MSR'
    MAR = 'MAR'
    MOZ = 'MOZ'
    MMR = 'MMR'
    NAM = 'NAM'
    NRU = 'NRU'
    NPL = 'NPL'
    NLD = 'NLD'
    NCL = 'NCL'
    NZL = 'NZL'
    NIC = 'NIC'
    NER = 'NER'
    NGA = 'NGA'
    NIU = 'NIU'
    NFK = 'NFK'
    MNP = 'MNP'
    NOR = 'NOR'
    OMN = 'OMN'
    PAK = 'PAK'
    PLW = 'PLW'
    PSE = 'PSE'
    PAN = 'PAN'
    PNG = 'PNG'
    PRY = 'PRY'
    PER = 'PER'
    PHL = 'PHL'
    PCN = 'PCN'
    POL = 'POL'
    PRT = 'PRT'
    PRI = 'PRI'
    QAT = 'QAT'
    MKD = 'MKD'
    ROU = 'ROU'
    RUS = 'RUS'
    RWA = 'RWA'
    REU = 'REU'
    BLM = 'BLM'
    SHN = 'SHN'
    KNA = 'KNA'
    LCA = 'LCA'
    MAF = 'MAF'
    SPM = 'SPM'
    VCT = 'VCT'
    WSM = 'WSM'
    SMR = 'SMR'
    STP = 'STP'
    SAU = 'SAU'
    SEN = 'SEN'
    SRB = 'SRB'
    SYC = 'SYC'
    SLE = 'SLE'
    SGP = 'SGP'
    SXM = 'SXM'
    SVK = 'SVK'
    SVN = 'SVN'
    SLB = 'SLB'
    SOM = 'SOM'
    ZAF = 'ZAF'
    SGS = 'SGS'
    SSD = 'SSD'
    ESP = 'ESP'
    LKA = 'LKA'
    SDN = 'SDN'
    SUR = 'SUR'
    SJM = 'SJM'
    SWE = 'SWE'
    CHE = 'CHE'
    SYR = 'SYR'
    TWN = 'TWN'
    TJK = 'TJK'
    TZA = 'TZA'
    THA = 'THA'
    TLS = 'TLS'
    TGO = 'TGO'
    TKL = 'TKL'
    TON = 'TON'
    TTO = 'TTO'
    TUN = 'TUN'
    TUR = 'TUR'
    TKM = 'TKM'
    TCA = 'TCA'
    TUV = 'TUV'
    UGA = 'UGA'
    UKR = 'UKR'
    ARE = 'ARE'
    GBR = 'GBR'
    UMI = 'UMI'
    USA = 'USA'
    URY = 'URY'
    UZB = 'UZB'
    VUT = 'VUT'
    VEN = 'VEN'
    VNM = 'VNM'
    VGB = 'VGB'
    VIR = 'VIR'
    WLF = 'WLF'
    ESH = 'ESH'
    YEM = 'YEM'
    ZMB = 'ZMB'
    ZWE = 'ZWE'


class CURRENTOCCUPATIONSTATUS(str, Enum):
    EMPLOYEE = 'EMPLOYEE'
    STUDENT = 'STUDENT'


class DOCKETSTATUS(str, Enum):
    REVIEW = 'REVIEW'
    ENABLE_DOWNLOAD = 'ENABLE_DOWNLOAD'


class EXPENSECOVERAGE1(str, Enum):
    CASH = 'CASH'


class EXPENSECOVERAGE2(str, Enum):
    ACCOMMODATION_PROVIDED = 'ACCOMMODATION_PROVIDED'


class EXPENSECOVERAGE3(str, Enum):
    ALL_COVERED = 'ALL_COVERED'


class EXPENSECOVERAGE4(str, Enum):
    PREPAID_TRANSPORT = 'PREPAID_TRANSPORT'


class EXPENSECOVERAGE5(str, Enum):
    OTHER = 'OTHER'


class FAMILYMEMBEROFEU(str, Enum):
    YES = 'YES'
    NO = 'NO'


class GENDER(str, Enum):
    M = 'M'
    F = 'F'
    T = 'T'
    O = 'O'


class HOURSELECT(int, Enum):
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_0 = 0
    integer_13 = 13
    integer_14 = 14
    integer_15 = 15
    integer_16 = 16
    integer_17 = 17
    integer_18 = 18
    integer_19 = 19
    integer_20 = 20


class INSURANCEPLAN(str, Enum):
    USD50K = 'USD50K'
    USD100K = 'USD100K'
    USD500K = 'USD500K'
    USD1M = 'USD1M'


class ITROPTION1(str, Enum):
    SKIP = 'SKIP'
    NO_ITR = 'NO_ITR'


class MINUTESELECT(int, Enum):
    integer_0 = 0
    integer_5 = 5
    integer_10 = 10
    integer_15 = 15
    integer_20 = 20
    integer_25 = 25
    integer_30 = 30
    integer_35 = 35
    integer_40 = 40
    integer_45 = 45
    integer_50 = 50
    integer_55 = 55


class OPTION(str, Enum):
    YES = 'YES'
    NO = 'NO'


class PASSPORTTYPE(str, Enum):
    REGULAR = 'REGULAR'
    OFFICIAL = 'OFFICIAL'
    DIPLOMATIC = 'DIPLOMATIC'
    EMERGENCY = 'EMERGENCY'
    COLLECTIVE = 'COLLECTIVE'
    E_PASSPORT = 'E_PASSPORT'


class PAYMENTMETHOD1(str, Enum):
    CASH = 'CASH'


class PAYMENTMETHOD2(str, Enum):
    TRAVELLERS_CHEQUE = 'TRAVELLERS_CHEQUE'


class PAYMENTMETHOD3(str, Enum):
    CREDIT_CARD = 'CREDIT_CARD'


class PAYMENTMETHOD4(str, Enum):
    PREPAID_ACCOMMODATION = 'PREPAID_ACCOMMODATION'


class PAYMENTMETHOD5(str, Enum):
    PREPAID_TRANSPORT = 'PREPAID_TRANSPORT'


class PAYMENTMETHOD6(str, Enum):
    OTHER = 'OTHER'


class PHOTOGRAPHAPPOINTMENT(str, Enum):
    YES = 'YES'


class PREFLOC(str, Enum):
    Bengaluru = 'Bengaluru'
    Hyderabad = 'Hyderabad'
    Chennai = 'Chennai'


class PURPOSEOFVISAORTRAVEL(str, Enum):
    VISIT_FAMILY_FRIENDS = 'VISIT_FAMILY_FRIENDS'
    TOURISM = 'TOURISM'
    BUSINESS = 'BUSINESS'
    CULTURAL = 'CULTURAL'
    OFFICIAL_VISIT = 'OFFICIAL_VISIT'
    STUDY = 'STUDY'
    MEDICAL = 'MEDICAL'
    SPORTS = 'SPORTS'
    AIRPORT_TRANSIT = 'AIRPORT_TRANSIT'
    OTHER = 'OTHER'


class RELATIONSHIP(str, Enum):
    SELF = 'SELF'
    SPOUSE = 'SPOUSE'
    DEPENDENT_PARENT = 'DEPENDENT_PARENT'
    DEPENDENT_CHILD = 'DEPENDENT_CHILD'


class RELATIONSHIPWITHEU(str, Enum):
    SPOUSE = 'SPOUSE'
    CHILD = 'CHILD'
    GRANDCHILD = 'GRANDCHILD'
    DEPENDENT_ASCENDANT = 'DEPENDENT_ASCENDANT'
    REGISTERED_PARTNER = 'REGISTERED_PARTNER'
    OTHER = 'OTHER'


class SAMEACCOMMODATIONASPRIMARY(str, Enum):
    ACCOMMODATION = 'ACCOMMODATION'


class SAMEASPASSADDR(str, Enum):
    SAME_AS_PASS_ADDR = 'SAME_AS_PASS_ADDR'


class SAMEFLIGHTTICKETASPRIMARY(str, Enum):
    FLIGHT_TICKET = 'FLIGHT_TICKET'


class SAMEITINERARYASPRIMARY(str, Enum):
    ITINERARY = 'ITINERARY'


class SKIPBANKSTATEMENTS(str, Enum):
    YES = 'YES'


class SKIPSALARYSLIPS(str, Enum):
    YES = 'YES'


class SPONSORTYPE1(str, Enum):
    SELF = 'SELF'


class SPONSORTYPE2(str, Enum):
    SPONSOR = 'SPONSOR'


class SPONSORTYPE3(str, Enum):
    INVITER = 'INVITER'


class SPONSORTYPE4(str, Enum):
    OTHER = 'OTHER'


class VISAMODE(str, Enum):
    Sticker = 'Sticker'
    Evisa = 'Evisa'
    Online = 'Online'
    


class VISAPOLICY1(str, Enum):
    VISA_FEE_NONREFUNDABLE = 'VISA_FEE_NONREFUNDABLE'


class VISAPOLICY2(str, Enum):
    MULTIPLE_ENTRY_INSURANCE = 'MULTIPLE_ENTRY_INSURANCE'


class VISAPOLICY3(str, Enum):
    DATA_CONSENT_AND_VIS = 'DATA_CONSENT_AND_VIS'


class VISATYPE(str, Enum):
    Tourist = 'Tourist'
    Business = 'Business'
    Work = 'Work'
    Dependent = 'Dependent'
    Visitor = 'Visitor'
    Student = 'Student'
    Sports = 'Sports'


class FieldGrpRootAddonsAddonCardAddonCartRow(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    slno: Optional[str] = Field(None, description='Enter  ', title=' ')
    addon_id: Optional[str] = Field(
        None, description='Enter Addon ID', title='Addon ID'
    )
    addon_name: Optional[str] = Field(
        None, description='Enter Add-Ons', title='Add-Ons'
    )
    refid: Optional[str] = Field(None, description='Enter Ref ID', title='Ref ID')
    txnid: Optional[str] = Field(None, description='Enter Txn ID', title='Txn ID')
    status: Optional[str] = Field(None, description='Enter Status', title='Status')
    lps_status: Optional[str] = Field(
        None, description='Enter LPS Status', title='LPS Status'
    )
    amount: Optional[str] = Field(None, description='Enter Amount', title='Amount')
    message: Optional[str] = Field(None, description='Enter Message', title='Message')
    remarks: Optional[str] = Field(None, description='Enter Remarks', title='Remarks')


class RootAccomodationAccommodationChoice(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    accommodation_option: Optional[ACCOMMODATIONARRANGEMENT] = Field(
        'BOOKED',
        description='Select Option',
        title='Please let us know how your stay is arranged:',
    )


class RootAccomodationAddOnService(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class RootAccomodationBookedAppointment(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    booking_upload: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='upload a pdf', title='Accommodation Booking'
    )
    accommodation_name: Optional[str] = Field(
        None, description='Enter Name of Accommodation', title='Name of Accommodation'
    )
    accommodation_address: Optional[str] = Field(
        None,
        description='Enter Address of Accommodation',
        title='Address of Accommodation',
    )
    accommodation_email: Optional[str] = Field(
        None,
        description='Enter Email Address of Accommodation',
        title='E-mail Address of Accommodation',
    )
    accommodation_phone: Optional[str] = Field(
        None,
        description='Enter Telephone of Accommodation',
        title='Telephone of Accommodation',
    )


class RootAccomodationInvitationDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    inviter_name: Optional[str] = Field(
        None,
        description='Enter Name of the Inviter',
        title='Name of the Inviter (Family/Friend)',
    )
    relationship: Optional[RELATIONSHIP] = Field(
        None, description='Select Option', title='Relationship'
    )
    inviter_address: Optional[str] = Field(
        None,
        description='Enter Address of the Inviter',
        title='Address of the Inviter (Family/Friend)',
    )
    mobile_number: Optional[str] = Field(
        None,
        description='Enter Mobile/Telephone Number',
        title='Mobile/Telephone Number',
    )
    email_id: Optional[str] = Field(
        None, description='Enter Email ID', title='Email ID of Inviter (Family/Friend)'
    )
    passport_bio_page: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload an image/file',
        title="Front Page of Inviter's Passport",
    )
    visa_copy_permit: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload an image/file',
        title='Visa Copy / Resident Permit Card',
    )
    accommodation_proof: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title="Inviter's Accommodation Proof"
    )


class RootAdditionalDetailsAppDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    application_on_behalf: Optional[OPTION] = Field(
        'NO',
        description='Select Option',
        title='Are you submitting this Schengen Visa application on behalf of the other person?',
    )
    surname: Optional[str] = Field(None, description='Enter Surname', title='Surname')
    first_name: Optional[str] = Field(
        None, description='Enter First Name', title='First Name'
    )
    address_line_1: Optional[str] = Field(
        None, description='Enter Address Line 1', title='Address Line 1'
    )
    address_line_2: Optional[str] = Field(
        None, description='Enter Address Line 2', title='Address Line 2'
    )
    pin_code: Optional[str] = Field(
        None, description='Enter Pin Code', title='Pin Code'
    )
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    country: Optional[str] = Field(None, description='Enter Country', title='Country')
    email_address: Optional[str] = Field(
        None, description='Enter Email Address', title='Email Address'
    )
    telephone_mobile_number: Optional[str] = Field(
        None,
        description='Enter Telephone / Mobile Number',
        title='Telephone / Mobile Number',
    )


class RootAdditionalDetailsFamilyEu(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    is_family_member: Optional[FAMILYMEMBEROFEU] = Field(
        'NO',
        description='Select Option',
        title='Do you have a family member who is an EU (European Union), EEA (European Economic Area), or CH (Switzerland) Citizen or a national of the United Kingdom who is a beneficiary of the agreement between the Swiss Confederation and the United Kingdom?',
    )
    given_name: Optional[str] = Field(
        None, description='Enter Given Name', title='Given Name of the Family Member'
    )
    surname: Optional[str] = Field(
        None, description='Enter Surname', title='Surname of the Family Member'
    )
    nationality: Optional[str] = Field(
        None, description='Enter Nationality', title='Nationality of the Family Member'
    )
    date_of_birth: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Birth of the Family Member'
    )
    travel_document_id: Optional[str] = Field(
        None,
        description='Enter document/ID number',
        title='Travel document/ ID card number',
    )
    relationship: Optional[RELATIONSHIPWITHEU] = Field(
        None, description='Select Option', title='Relationship'
    )


class RootAdditionalDetailsNationalId(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    aadhaar_upload_front: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Front Image Of Aadhaar Card'
    )
    aadhaar_upload_back: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Back Image Of Aadhaar Card'
    )
    aadhaar_number: Optional[str] = Field(
        None, description='Enter Aadhaar Card Number', title='Aadhaar Card Number'
    )


class RootAdditionalDetailsSponsorship(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    sponsorship_options_1: Optional[SPONSORTYPE1] = Field(
        None, description='Select Option', title=''
    )
    sponsorship_options_2: Optional[SPONSORTYPE2] = Field(
        None, description='Select Option', title=''
    )
    sponsorship_options_3: Optional[SPONSORTYPE3] = Field(
        None, description='Select Option', title=''
    )
    sponsorship_options_4: Optional[SPONSORTYPE4] = Field(
        None, description='Select Option', title=''
    )
    others_specify: Optional[str] = Field(
        None,
        description='Enter Other Sponsor (Please Specify)',
        title='Other Sponsor (Please Specify)',
    )
    support_means_cash: Optional[PAYMENTMETHOD1] = Field(
        None, description='Select Option', title=''
    )
    support_means_travellers_cheque: Optional[PAYMENTMETHOD2] = Field(
        None, description='Select Option', title=''
    )
    support_means_credit_card: Optional[PAYMENTMETHOD3] = Field(
        None, description='Select Option', title=''
    )
    support_means_prepaid_accommodation: Optional[PAYMENTMETHOD4] = Field(
        None, description='Select Option', title=''
    )
    support_means_prepaid_transport: Optional[PAYMENTMETHOD5] = Field(
        None, description='Select Option', title=''
    )
    support_means_other: Optional[PAYMENTMETHOD6] = Field(
        None, description='Select Option', title=''
    )
    others_specify_1: Optional[str] = Field(
        None,
        description='Enter Other Means (Please Specify)',
        title='Other Means (Please Specify)',
    )
    coverage_expense_cash: Optional[EXPENSECOVERAGE1] = Field(
        None, description='Select Option', title=''
    )
    coverage_accommodation_provided: Optional[EXPENSECOVERAGE2] = Field(
        None, description='Select Option', title=''
    )
    coverage_all_covered: Optional[EXPENSECOVERAGE3] = Field(
        None, description='Select Option', title=''
    )
    coverage_prepaid_transport: Optional[EXPENSECOVERAGE4] = Field(
        None, description='Select Option', title=''
    )
    coverage_other: Optional[EXPENSECOVERAGE5] = Field(
        None, description='Select Option', title=''
    )
    others_specify_2: Optional[str] = Field(
        None,
        description='Enter Other Means (Please Specify)',
        title='Other Means (Please Specify)',
    )


class RootAdditionalDetailsTravelInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    travelling_to_other_country: Optional[OPTION] = Field(
        'NO',
        description='Select Option',
        title='Are you traveling to any other country during this trip, apart from Schengen area?',
    )
    country_of_travel: Optional[COUNTRY3] = Field(
        None, description='Select Option', title='Country of Travel'
    )
    valid_visa_for_country: Optional[OPTION] = Field(
        'NO',
        description='Select Option',
        title='Do you have a valid visa for the country mentioned above?',
    )
    start_date_of_visa: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Start Date of Visa'
    )
    end_date_of_visa: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='End Date of Visa'
    )
    visa_copy: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Visa Copy'
    )


class RootAddonsAddonCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    addon_cart_row: Optional[List[FieldGrpRootAddonsAddonCardAddonCartRow]] = Field(
        None, title='Addon Table'
    )


class RootAppointmentAppointmentScheduled(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    scheduled_location: Optional[PREFLOC] = Field(
        None, description='Select Option', title='Scheduled Location (City)'
    )
    scheduled_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Scheduled Date'
    )
    scheduled_hour: Optional[HOURSELECT] = Field(
        None, description='Select Option', title='Scheduled Time (Hour)'
    )
    scheduled_minute: Optional[MINUTESELECT] = Field(
        None, description='Select Option', title='Scheduled Time (Minute)'
    )
    upload_appointment: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='upload a pdf', title='Appointment Document'
    )


class RootBankStatementUpload(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    bank_statements: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='upload a pdf', title='Bank Statements (Optional)'
    )


class RootConsultantInfoAdditionalDocumentsAdditionaldocumentgroupAdditionalDocumentsCard(
    BaseModel
):
    model_config = ConfigDict(
        extra='allow',
    )
    document_name: Optional[str] = Field(
        None, description='Enter Name of the document', title='Name of the document'
    )
    document_description: Optional[str] = Field(
        None, description='Enter Document Description', title='Document Description'
    )
    file_upload: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='File Upload'
    )


class RootConsultantInfoAppointments(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    scheduled_location: Optional[PREFLOC] = Field(
        None, description='Select Option', title='Scheduled Location'
    )
    scheduled_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Scheduled Date'
    )
    scheduled_hour: Optional[HOURSELECT] = Field(
        None, description='Select Option', title='Scheduled (Hour)'
    )
    scheduled_minute: Optional[MINUTESELECT] = Field(
        None, description='Select Option', title='Scheduled (Minutes)'
    )
    upload_appointment: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='upload a pdf', title='Appointment Document'
    )


class RootConsultantInfoConfirmedAccommodation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    booking_upload: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Confirmed Accommodation'
    )
    accommodation_name: Optional[str] = Field(
        None, description='Enter Name of Accommodation', title='Name of Accommodation'
    )
    accommodation_address: Optional[str] = Field(
        None,
        description='Enter Address of Accommodation',
        title='Address of Accommodation',
    )
    accommodation_email: Optional[str] = Field(
        None,
        description='Enter Email Address of Accommodation',
        title='E-mail Address of Accommodation',
    )
    accommodation_phone: Optional[str] = Field(
        None,
        description='Enter Telephone of Accommodation',
        title='Telephone of Accommodation',
    )


class RootConsultantInfoConfirmedFlightTicket(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    flight_tickets: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an pdf', title='Confirmed Flight Ticket'
    )


class RootConsultantInfoCoverLetter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    cover_letter: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Cover Letter'
    )


class RootConsultantInfoDummyAccommodation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    booking_upload: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Dummy Accommodation'
    )
    accommodation_name: Optional[str] = Field(
        None, description='Enter Name of Accommodation', title='Name of Accommodation'
    )
    accommodation_address: Optional[str] = Field(
        None,
        description='Enter Address of Accommodation',
        title='Address of Accommodation',
    )
    accommodation_email: Optional[str] = Field(
        None,
        description='Enter Email Address of Accommodation',
        title='E-mail Address of Accommodation',
    )
    accommodation_phone: Optional[str] = Field(
        None,
        description='Enter Telephone of Accommodation',
        title='Telephone of Accommodation',
    )


class RootConsultantInfoDummyFlightTicket(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    flight_tickets: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an pdf', title='Dummy Flight Ticket'
    )


class RootConsultantInfoItineraryAddon(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload_itinerary: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Itinerary'
    )


class RootConsultantInfoTravelInsurances(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    flight_reservation_tickets: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an pdf', title='Travel Insurance'
    )


class RootDeclarationsVisaDeclaration(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_policy_1: Optional[VISAPOLICY1] = Field(
        None, description='Select Option', title=''
    )
    visa_policy_2: Optional[VISAPOLICY2] = Field(
        None, description='Select Option', title=''
    )
    visa_policy_3: Optional[VISAPOLICY3] = Field(
        None, description='Select Option', title=''
    )


class RootDocketInfoCardBuilder(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    operation_type: Optional[str] = Field(
        None, description='Select Operation type', title='Select Operation'
    )


class RootItineraryAccomodationAddOnServiceItinerary(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class RootItineraryAccomodationItineraryCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload_itinerary: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='upload a pdf', title='Itinerary (Optional)'
    )


class RootItrAcknowledgementUpload(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    itr_acknowledgement: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='upload a pdf', title='ITR Acknowledgements (Optional)'
    )


class RootLetsGetStarted(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    form_status: Optional[str] = Field(
        None, description='Used for form status', title=''
    )


class RootPassportOtherDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    civil_status: Optional[CIVILMARITALSTATUS] = Field(
        None, description='Select Option', title='Civil/Marital Status'
    )
    nationality_of_birth: Optional[str] = Field(
        'INDIAN',
        description='Enter Nationality of Birth (if different)',
        title='Nationality of Birth (if different)',
    )
    other_nationality: Optional[str] = Field(
        None, description='Enter Other Nationality', title='Other Nationality'
    )


class RootPassportPassportDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type_of_passport: Optional[PASSPORTTYPE] = Field(
        None, description='Select Option', title='Type of Passport'
    )
    ovd_front: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Front Page of Passport'
    )
    ovd_back: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Back Page of Passport'
    )
    first_name: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.name',
        description='Enter Given Name as in Passport',
        title='Given Name as in Passport',
    )
    surname: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.surname',
        description='Enter Surname as in Passport',
        title='Surname as in Passport',
    )
    date_of_birth: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Birth as in Passport'
    )
    passport_number: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.uid',
        description='Enter Passport Number',
        title='Passport Number',
    )
    date_of_issue: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Issue'
    )
    date_of_expiry: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Expiry'
    )
    gender: Optional[GENDER] = Field(None, description='Select Option', title='Gender')
    place_of_issue: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.place_of_issue',
        description='Enter Place of Issue',
        title='Place of Issue',
    )
    place_of_birth: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.place_of_birth',
        description='Enter Place of Birth',
        title='Place of Birth',
    )
    nationality: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.nationality',
        description='Enter Nationality',
        title='Nationality',
    )
    issued_by: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.place_of_issue',
        description='Enter Issued By (Authority/City)',
        title='Issued By (Authority/City)',
    )
    father_name: Optional[str] = Field(
        None, description="Enter Father's Name", title="Father's Name"
    )
    mother_name: Optional[str] = Field(
        None, description="Enter Mother's Name", title="Mother's Name"
    )
    spouse_name: Optional[str] = Field(
        None, description="Enter Spouse' Name", title="Spouse' Name"
    )
    address_line_1: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.full_address',
        description='Enter Address Line 1',
        title='Address Line 1',
    )
    address_line_2: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.address_line_2',
        description='Enter Address Line 2',
        title='Address Line 2',
    )
    pin_code: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.postal_code',
        description='Enter PIN Code',
        title='PIN Code',
    )
    city: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.city',
        description='Enter City',
        title='City',
    )
    state: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.state',
        description='Enter State',
        title='State',
    )
    country: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.code',
        description='Enter Country',
        title='Country',
    )
    desired_validity: Optional[str] = Field(
        '6',
        description='This is the minimum duration for which the passport should be valid',
        title='',
    )


class RootPhotographAddOnServicePhoto(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class RootPhotographPassportPhoto(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    photo: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Passport-Size Photo (Optional)'
    )


class RootPreviousVisasFingerprintDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    fingerprint_collected: Optional[OPTION] = Field(
        'NO',
        description='Select Option',
        title='Have your fingerprints been collected before for a Schengen visa application?',
    )
    previous_visa_file: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Previous Visa Copy'
    )
    visa_sticker_number: Optional[str] = Field(
        None, description='Enter Visa (Sticker) Number', title='Visa (Sticker) Number'
    )
    date_of_previous_visa: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date (If Known)'
    )


class RootPreviousVisasPreviousVisasDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    have_past_visa: Optional[OPTION] = Field(
        'NO',
        description='Select Option',
        title='Have you been issued a Schengen visa during the past?',
    )
    previous_visa_copy: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Previous Visa Copy'
    )
    visa_number: Optional[str] = Field(
        None, description='Enter Visa Number', title='Visa Number'
    )
    visa_type: Optional[str] = Field(
        None, description='Enter Visa Type', title='Visa Type'
    )
    country_of_issue: Optional[COUNTRY] = Field(
        None, description='Select Option', title='Country of Visa Issued from'
    )
    start_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Start Date of Visa'
    )
    end_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='End Date of Visa'
    )
    purpose_of_visa: Optional[PURPOSEOFVISAORTRAVEL] = Field(
        None,
        description='Select Option',
        title='Purpose of Visa (at the time of filing your previous visa application)',
    )
    utilized_visa: Optional[OPTION] = Field(
        None,
        description='Select Option',
        title='Have you utilised/travelled using this Visa?',
    )


class RootResidentialAddressResidentialAddressCardV1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type_of_proof: Optional[ADDRESSPROOFTYPE] = Field(
        None, description='Select Option', title='Type of Proof'
    )
    address_proof_upload: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload an image/file', title='Upload Address Proof'
    )
    address_line_1: Optional[str] = Field(
        None, description='Enter Address Line 1', title='Address Line 1'
    )
    address_line_2: Optional[str] = Field(
        None, description='Enter Address Line 2', title='Address Line 2'
    )
    pin_code: Optional[str] = Field(
        None, description='Enter PIN Code', title='PIN Code'
    )
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    country: Optional[str] = Field(None, description='Enter Country', title='Country')


class RootResidentialAddressResidentialAddressCardV2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address_line_1: Optional[str] = Field(
        None, description='Enter Address Line 1', title='Address Line 1'
    )
    address_line_2: Optional[str] = Field(
        None, description='Enter Address Line 2', title='Address Line 2'
    )
    pin_code: Optional[str] = Field(
        None, description='Enter PIN Code', title='PIN Code'
    )
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    country: Optional[str] = Field(None, description='Enter Country', title='Country')


class RootSalarySlipUpload(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    salary_slip: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='upload a pdf', title='Salary Slip (Optional)'
    )


class RootSharedTravellInfoShared(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    itinerary_same: Optional[SAMEITINERARYASPRIMARY] = Field(
        None, description='Select Option', title=''
    )
    accommodation_same: Optional[SAMEACCOMMODATIONASPRIMARY] = Field(
        None, description='Select Option', title=''
    )
    flight_ticket_same: Optional[SAMEFLIGHTTICKETASPRIMARY] = Field(
        None, description='Select Option', title=''
    )


class RootSubmitInfoConfirm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    viewed_data: Optional[CONFIRMVIEWEDDATA] = Field(
        None, description='Select Option', title=''
    )
    appointment_booked: Optional[CONFIRMAPTBOOKED] = Field(
        None, description='Select Option', title=''
    )
    addons_addressed: Optional[CONFIRMADDONS] = Field(
        None, description='Select Option', title=''
    )
    docs_uploaded: Optional[CONFIRMDOCSUPLOADED] = Field(
        None, description='Select Option', title=''
    )
    understand_lock: Optional[CONFIRMUNEDITABLE] = Field(
        None, description='Select Option', title=''
    )


class RootSubmitInfoDocket(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    docket_status: Optional[DOCKETSTATUS] = Field(
        'REVIEW', description='Select Option', title=''
    )


class RootTicketingAddOnService(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class RootTicketingFlightTickets(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    flight_tickets: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='upload a pdf', title='Flight Tickets'
    )


class RootTravelInsuranceAddOnCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    add_on_service_option: Optional[ADOSI] = Field(
        None, description='Select Option', title=''
    )
    nominee_name: Optional[str] = Field(
        None, description='Enter Name of Nominee', title='Name of Nominee'
    )
    relationship_with_nominee: Optional[RELATIONSHIP] = Field(
        None, description='Select Option', title='Relationship with Nominee'
    )
    pre_existing_disease: Optional[str] = Field(
        None,
        description='Enter Any pre-existing Disease?',
        title='Any pre-existing Disease?',
    )
    pre_existing_disease_details: Optional[str] = Field(
        None,
        description='Enter Details of Pre-Existing Disease',
        title='Details of Pre-Existing Disease',
    )
    plan_sum_insured: Optional[INSURANCEPLAN] = Field(
        None, description='Select Option', title='Plan (Sum Insured)'
    )


class RootTravelInsuranceAddOnService(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class RootTravelInsuranceFlightReservationDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    flight_reservation_tickets: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='upload a pdf', title='Insurance Document'
    )


class RootVisaRequestInformationVisaRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    phone_number: Optional[str] = Field(
        None, description='Enter Phone Number', title='Phone Number'
    )
    email_id: Optional[str] = Field(
        None, description='Enter Email ID', title='Email ID'
    )
    from_country: Optional[COUNTRY3] = Field(
        None, description='Select Option', title='Travelling From'
    )
    to_country: Optional[COUNTRY3] = Field(
        None, description='Select Option', title='Travelling To'
    )
    departure_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Departure'
    )
    arrival_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Arrival'
    )
    visa_type: Optional[VISATYPE] = Field(
        None, description='Select Option', title='Type of Visa'
    )
    length_of_stay: Optional[int] = Field(
        None,
        description='Enter Length of Stay (in Days)',
        title='Length of Stay (in Days)',
    )
    validity: Optional[int] = Field(
        None,
        description='Enter Validity of Visa (in Days)',
        title='Validity of Visa (in Days)',
    )
    no_of_entries: Optional[str] = Field(
        None, description='Enter Number of Entries', title='Number of Entries'
    )
    visa_mode: Optional[VISAMODE] = Field(
        None, description='Select Option', title='Visa Mode (E-Visa/Paper)'
    )
    traveller_type: Optional[str] = Field(None, title='')
    order_id: Optional[str] = Field(None, title='')
    earliest_appointment_availability: Optional[str] = Field(None, title='')
    visa_processing_type: Optional[str] = Field(None, title='')


class RootWorkAddressEducationDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    establishment_name: Optional[str] = Field(
        None,
        description='Enter Name of Establishment',
        title='Educational Establishment',
    )
    date_of_admission: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Admission'
    )
    establishment_address: Optional[str] = Field(
        None, description='Enter Address', title='Address of Educational Establishment'
    )
    establishment_contact: Optional[str] = Field(
        None,
        description='Enter Phone Number',
        title='Contact of Educational Establishment',
    )


class RootWorkAddressWorkDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employer_name: Optional[str] = Field(
        None, description='Enter Name of the Employer', title='Name of the Employer'
    )
    occupation: Optional[str] = Field(
        None, description='Enter Current Occupation', title='Current Occupation'
    )
    date_of_joining: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Joining'
    )
    work_phone: Optional[str] = Field(
        None,
        description='Enter Work Phone Number of Employer',
        title='Work Phone Number of Employer',
    )
    work_address: Optional[str] = Field(
        None, description='Enter Work Address', title='Work Address'
    )


class RootAccomodation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    accommodation_choice: Optional[RootAccomodationAccommodationChoice] = Field(
        None, title='Accommodation'
    )
    invitation_details: Optional[RootAccomodationInvitationDetails] = Field(
        None, title='Details of Stay with Family/Friends (Invitation)'
    )
    booked_appointment: Optional[RootAccomodationBookedAppointment] = Field(
        None, title='Booked Accommodation'
    )
    add_on_service: Optional[RootAccomodationAddOnService] = Field(
        None, title='Add-On Service'
    )


class RootAdditionalDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    national_id: Optional[RootAdditionalDetailsNationalId] = Field(
        None, title='National Identification Number'
    )
    travel_info: Optional[RootAdditionalDetailsTravelInfo] = Field(
        None, title='Travelling to Multiple Countries during this trip'
    )
    app_details: Optional[RootAdditionalDetailsAppDetails] = Field(
        None, title='Application Details'
    )
    family_eu: Optional[RootAdditionalDetailsFamilyEu] = Field(
        None, title='Family Member of EU, EEA, Swiss, or UK National'
    )
    sponsorship: Optional[RootAdditionalDetailsSponsorship] = Field(
        None, title='Sponsorship Details'
    )


class RootAddons(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    addon_card: Optional[RootAddonsAddonCard] = Field(None, title='Addon Cart')


class RootAppointment(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    appointment_scheduled: Optional[RootAppointmentAppointmentScheduled] = Field(
        None, title='My Scheduled Appointment Details'
    )
    add_on_service_option: Optional[ADDONSERVICEAPPOINTMENT] = Field(
        None, description='Select Option', title=''
    )


class RootBankStatement(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload: Optional[RootBankStatementUpload] = Field(
        None, title='Bank Statements (Optional)'
    )
    skip_bank_statements: Optional[SKIPBANKSTATEMENTS] = Field(
        None, description='Select Option', title=''
    )


class RootConsultantInfoAdditionalDocumentsAdditionaldocumentgroup(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    additional_documents_card: Optional[
        RootConsultantInfoAdditionalDocumentsAdditionaldocumentgroupAdditionalDocumentsCard
    ] = Field(None, title='Additional Document')


class RootDeclarations(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_declaration: Optional[RootDeclarationsVisaDeclaration] = Field(
        None, title='Visa Declaration'
    )


class RootDocketInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    card_builder: Optional[RootDocketInfoCardBuilder] = Field(
        None, title='Docket Operation'
    )


class RootItineraryAccomodation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    itinerary_card: Optional[RootItineraryAccomodationItineraryCard] = Field(
        None, title='Itinerary'
    )
    add_on_service_itinerary: Optional[
        RootItineraryAccomodationAddOnServiceItinerary
    ] = Field(None, title='Add-On Service')


class RootItrAcknowledgement(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload: Optional[RootItrAcknowledgementUpload] = Field(
        None, title='ITR Acknowledgements (Optional)'
    )
    itr_options: Optional[ITROPTION1] = Field(
        None, description='Select Option', title=''
    )


class RootPassport(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    passport_details: Optional[RootPassportPassportDetails] = Field(
        None, title='Passport Details'
    )
    other_details: Optional[RootPassportOtherDetails] = Field(
        None, title='Other Details'
    )


class RootPhotograph(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    passport_photo: Optional[RootPhotographPassportPhoto] = Field(
        None, title='Review my Passport-Sized Photo (Optional)'
    )
    appointment_photo_option: Optional[PHOTOGRAPHAPPOINTMENT] = Field(
        None, description='Select Option', title=''
    )
    add_on_service_photo: Optional[RootPhotographAddOnServicePhoto] = Field(
        None, title='Add-On Service'
    )


class RootPreviousVisas(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    previous_visas_details: Optional[RootPreviousVisasPreviousVisasDetails] = Field(
        None, title='Previous Visa Details'
    )
    fingerprint_details: Optional[RootPreviousVisasFingerprintDetails] = Field(
        None, title='Fingerprint Details'
    )


class RootResidentialAddress(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    same_as_passport_address: Optional[SAMEASPASSADDR] = Field(
        None, description='Select Option', title=''
    )
    residential_address_card_v1: Optional[
        RootResidentialAddressResidentialAddressCardV1
    ] = Field(None, title='Current Residential Address')
    residential_address_card_v2: Optional[
        RootResidentialAddressResidentialAddressCardV2
    ] = Field(None, title='Current Residential Address')


class RootSalarySlip(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload: Optional[RootSalarySlipUpload] = Field(
        None, title='Salary Slips (Optional)'
    )
    skip_salary_slips: Optional[SKIPSALARYSLIPS] = Field(
        None, description='Select Option', title=''
    )


class RootSharedTravellInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    shared: Optional[RootSharedTravellInfoShared] = Field(
        None, title='Same as Primary Traveller'
    )


class RootSubmitInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    docket: Optional[RootSubmitInfoDocket] = Field(None, title='Docket')
    confirm: Optional[RootSubmitInfoConfirm] = Field(None, title='Confirm')


class RootTicketing(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    flight_tickets: Optional[RootTicketingFlightTickets] = Field(
        None, title='Flight Tickets'
    )
    add_on_service: Optional[RootTicketingAddOnService] = Field(
        None, title='Add-On Service'
    )


class RootTravelInsurance(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    flight_reservation_details: Optional[
        RootTravelInsuranceFlightReservationDetails
    ] = Field(None, title='Insurance Details')
    add_on_service: Optional[RootTravelInsuranceAddOnService] = Field(
        None, title='Add-On Service'
    )
    add_on_card: Optional[RootTravelInsuranceAddOnCard] = Field(
        None, title='Add-On Service: Details Required'
    )


class RootVisaRequestInformation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_request: Optional[RootVisaRequestInformationVisaRequest] = Field(
        None, title='Summary'
    )


class RootWorkAddress(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    current_occupation_status: Optional[CURRENTOCCUPATIONSTATUS] = Field(
        'EMPLOYEE',
        description='Select Option',
        title='Are you currently an Employee or a Student?',
    )
    work_details: Optional[RootWorkAddressWorkDetails] = Field(
        None, title='Work Details'
    )
    education_details: Optional[RootWorkAddressEducationDetails] = Field(
        None, title='Education Details'
    )


class FieldGrpRootConsultantInfoAdditionalDocuments(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    additionaldocumentgroup: Optional[
        RootConsultantInfoAdditionalDocumentsAdditionaldocumentgroup
    ] = Field(None, title='Additional Document')


class RootConsultantInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    appointments: Optional[RootConsultantInfoAppointments] = Field(
        None, title='Appointments'
    )
    cover_letter: Optional[RootConsultantInfoCoverLetter] = Field(
        None, title='Cover Letter'
    )
    itinerary_addon: Optional[RootConsultantInfoItineraryAddon] = Field(
        None, title='Add-On : Itinerary'
    )
    dummy_accommodation: Optional[RootConsultantInfoDummyAccommodation] = Field(
        None, title='Add-On : Dummy Accommodation'
    )
    confirmed_accommodation: Optional[RootConsultantInfoConfirmedAccommodation] = Field(
        None, title='Add-On : Confirmed Accommodation'
    )
    dummy_flight_ticket: Optional[RootConsultantInfoDummyFlightTicket] = Field(
        None, title='Add-On : Dummy Flight Ticket'
    )
    confirmed_flight_ticket: Optional[RootConsultantInfoConfirmedFlightTicket] = Field(
        None, title='Add-On : Confirmed Flight Ticket'
    )
    travel_insurances: Optional[RootConsultantInfoTravelInsurances] = Field(
        None, title='Add-On : Travel Insurance'
    )
    additional_documents: Optional[
        List[FieldGrpRootConsultantInfoAdditionalDocuments]
    ] = Field(None, title='Additional Document')


class Schengentouristvisa(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    lets_get_started: Optional[RootLetsGetStarted] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <title>Schengen Visa Application Guidelines</title>\n  <style>\n    .container {\n      background-color: #fefefe;\n      padding: 16px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      font-family: \'Inter\', sans-serif;\n      color: #111;\n    }\n    .container.schengen {\n      /* width: 540px; */\n      max-width: 100%;\n    }\n    .container p,\n    .container ul,\n    .container li {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #333;\n      margin: 0;\n    }\n    .container p {\n      margin-bottom: 16px;\n    }\n    .container ul {\n      padding-left: 20px;\n      margin-bottom: 16px;\n    }\n    .container li {\n      margin-bottom: 8px;\n    }\n    .container .heading {\n      font-weight: 400;\n      font-size: 18px;\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 8px;\n    }\n    .container .subheading {\n      font-weight: 400;\n      font-size: 18px;\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 16px;\n    }\n    .container .note {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #555;\n      margin: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class="container schengen">\n    <div class="heading" style="font-size: 30px; font-weight: 600; margin-bottom: 8px;">Schengen Visa Application Guidelines</div>\n\n    <p style="font-size: 22px; font-weight: 700; margin-bottom: 16px;">\n      Follow these steps carefully to ensure smooth processing of your Schengen visa application:\n    </p>\n\n    <p class="subheading"><strong>Important:</strong></p>\n    <ul>\n      <li>All documents must be printed on A4 size sheets only.</li>\n      <li>All applicants must book an appointment online to submit their visa application and biometric data at the Schengen visa application centre.</li>\n      <li>Required documents must be submitted with the visa application (no fax or email to Embassy accepted).</li>\n      <li>Only documents listed in the checklist will be accepted.</li>\n      <li>If your visa has been refused previously, you must submit the refusal notice or a written explanation of the reason for travel and refusal.</li>\n    </ul>\n\n    <p class="subheading"><strong>Brief Procedure:</strong></p>\n    <ul>\n      <li>TTK will review your documents and suggest necessary changes before submission.</li>\n      <li>TTK will book an appointment as per jurisdiction at the Visa Application Centre (VAC), subject to slot availability. Inform TTK of your tentative dates at the earliest.</li>\n      <li>Applicants must visit the VAC in person to provide biometric fingerprint data with a signed application form, appointment letter, and checklist documents.</li>\n      <li>Alternatively, TTK can submit the application if the applicant qualifies for biometric waiver due to previous Schengen visa issuance.</li>\n      <li>Courier service is available by filling out the \'Courier Request Form\'. The passport will be sent to the address mentioned in the form.</li>\n    </ul>\n\n    <p class="subheading"><strong>Processing Time:</strong></p>\n    <ul>\n      <li>Standard processing time: 10 to 15 business days from the date of application at the VFS Application Centre.</li>\n      <li>Processing duration may vary. Final decision is at the discretion of the Embassy/Consulate.</li>\n      <li>Consular officers may request additional documents or a personal interview if required.</li>\n    </ul>\n\n    <p class="note">\n      <strong>Disclaimer:</strong> TTK Services Private Limited ("TTK") will facilitate services in compliance with the respective foreign mission\'s requirements. TTK is not involved in the adjudication of visa applications or decisions related to approval/refusal. TTK shall not be held responsible for delays, restricted visa entries, or further documentation/interview requests made by the consular authority.\n    </p>\n  </div>\n</body>\n</html>\n',
        title="Let's Get Started",
    )
    visa_request_information: Optional[RootVisaRequestInformation] = Field(
        None, description='No Instructions Present', title='Visa Request Summary'
    )
    appointment: Optional[RootAppointment] = Field(
        None, description='No Instructions Present', title='Appointment Details'
    )
    passport: Optional[RootPassport] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <title>Guidelines for Passport</title>\n  <style>\n    .container {\n      background-color: #fefefe;\n      padding: 16px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      font-family: \'Inter\', sans-serif;\n      color: #111;\n    }\n    /* allow fixed width like original */\n    .container.passport {\n      max-width: 100%;\n    }\n\n    /* regular form text */\n    .container p,\n    .container ul,\n    .container li {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #333;\n      margin: 0;\n    }\n    .container p {\n      margin-bottom: 16px;\n    }\n    .container ul {\n      padding-left: 20px;\n      margin-bottom: 0;\n    }\n    .container li {\n      margin-bottom: 8px;\n    }\n\n    /* headings and emphasis */\n    .container .heading,\n    .container .subheading {\n      font-weight: 400;   /* same weight */\n      font-size: 18px;    /* smaller for emphasis */\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 8px;\n    }\n    .container .subheading {\n      margin-bottom: 16px;\n    }\n  </style>\n</head>\n<body>\n  <div class="container passport">\n    <div class="heading" style="font-size: 30px; font-weight: 600; margin-bottom: 8px;">Guidelines for Passport</div>\n\n    <div class="subheading" style="font-size: 22px; font-weight: 700; margin-bottom: 16px;">\n      Need help with this part? Here’s what you need to know.\n    </div>\n\n    <p>\n      To ensure your application goes smoothly, please make sure your Passport meets the following requirements:\n    </p>\n\n    <ul>\n      <li>\n        It must be valid for at least 6 months from your date of departure from Switzerland.\n      </li>\n      <li>\n        Handwritten passports are not accepted.\n      </li>\n      <li>\n        Your passport should be in good condition — no water damage, torn pages, peeling lamination, or spelling errors in your name.\n      </li>\n      <li>\n        It should not include any official observations like ECR status, changes to place of birth, spouse’s name, surname, or address.\n      </li>\n      <li>\n        If you have any old passports, please include the originals (if applicable).\n      </li>\n    </ul>\n  </div>\n</body>\n</html>\n',
        title='Passport',
    )
    photograph: Optional[RootPhotograph] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Photo Instructions - Switzerland</title>\n</head>\n<body style="margin: 0; font-family: Arial, sans-serif;">\n\n<!-- Full width wrapper with 10% left and right padding -->\n<div style="width: 100%; ">\n\n    <!-- Main card-style container -->\n    <div style="background: white;  border: 1px solid #ccc; width: 100%; padding: 20px; ">\n\n        <!-- <h2 style="color: #002b7f; text-align: center; margin-top: 0;">Instructions</h2> -->\n        <p style="text-align: center; color: #0073cf; font-weight: bold; margin-top: 0;">\n            (From the Government of Switzerland)\n        </p>\n\n        <div style="display: flex; flex-wrap: wrap; justify-content: center; margin-top: 20px;">\n\n            <!-- Photo Boxes -->\n            <div style="margin-bottom: 20px; text-align: center;">\n                <img src="https://d2phdgmkbm5x8b.cloudfront.net/img/schengen-passport-photo-01.webp" alt="Too Close" style="width: 100%; border: 1px solid #ccc; border-radius: 5px;">\n            </div>\n\n        </div>\n\n        <!-- Requirements Section -->\n        <div style="margin-top: 30px;">\n\n            <div style="margin-bottom: 20px;">\n                <h3 style="color: #0073cf; margin-top: 0;">Photograph quality</h3>\n                <ul style="line-height: 1.6; padding-left: 20px; margin-top: 10px;">\n                    <li>Be no more than 6-months old</li>\n                    <li>35–40mm in width</li>\n                    <li>Close up of your head and top of your shoulders so that your face takes up 70–80% of the photograph</li>\n                    <li>In sharp focus and clear</li>\n                    <li>Of high quality with no ink marks or creases</li>\n                </ul>\n            </div>\n\n            <div style="margin-bottom: 20px;">\n                <h3 style="color: #0073cf; margin-top: 0;">The Photographs Must:</h3>\n                <ul style="line-height: 1.6; padding-left: 20px; margin-top: 10px;">\n                    <li>Show you looking directly at the camera</li>\n                    <li>Show your skin tones naturally</li>\n                    <li>Have appropriate brightness and contrast</li>\n                    <li>Be printed on high quality paper, and at high resolution</li>\n                </ul>\n                <p style="margin-top: 10px;">\n                    Photographs taken with a digital camera must be high quality colour and printed on photo-quality paper.\n                </p>\n            </div>\n\n        </div>\n\n    </div>\n\n</div>\n\n</body>\n</html>\n',
        title='Photograph',
    )
    residential_address: Optional[RootResidentialAddress] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <title>Guidelines for Address Documents</title>\n  <style>\n    .container {\n      background-color: #fefefe;\n      padding: 16px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      font-family: \'Inter\', sans-serif;\n      color: #111;\n    }\n\n    /* regular form text */\n    .container p,\n    .container ul,\n    .container li {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #333;\n      margin: 0;\n    }\n    .container p {\n      margin-bottom: 12px;\n    }\n    .container ul {\n      padding-left: 20px;\n      margin-bottom: 16px;\n    }\n    .container li {\n      margin-bottom: 8px;\n    }\n\n    /* emphasized text (headings, bold lines) */\n    .container .heading,\n    .container strong {\n      font-weight: 400;       /* same weight */\n      font-size: 18px;        /* smaller for emphasis */\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 8px;\n      display: block;\n    }\n    .container .subheading {\n      font-weight: 400;\n      font-size: 18px;\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 16px;\n      display: block;\n    }\n\n    /* note text */\n    .container .note {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #555;\n      margin: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class="container">\n    <div class="heading" style="font-size: 30px; font-weight: 600; margin-bottom: 8px;">\n      Guidelines for Address Documents\n    </div>\n\n    <div class="subheading" style="font-size: 22px; font-weight: 700; margin-bottom: 16px;">\n      Need help with this part? Here’s what you need to know.\n    </div>\n\n    <p>\n      The address proof documents and work address provided in this section are\n      essential for processing your visa application.\n    </p>\n\n    <p class="heading">\n      Please ensure the following:\n    </p>\n\n    <ul>\n      <li>All information entered is accurate and current.</li>\n      <li>Uploaded documents clearly match the address provided.</li>\n    </ul>\n\n    <p class="note">\n      Incomplete or mismatched details may lead to delays or rejection of your application.\n    </p>\n  </div>\n</body>\n</html>\n',
        title='Address Proof',
    )
    work_address: Optional[RootWorkAddress] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <title>Guidelines for Address Documents</title>\n  <style>\n    .container {\n      background-color: #fefefe;\n      padding: 16px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      font-family: \'Inter\', sans-serif;\n      color: #111;\n    }\n\n    /* regular form text */\n    .container p,\n    .container ul,\n    .container li {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #333;\n      margin: 0;\n    }\n    .container p {\n      margin-bottom: 12px;\n    }\n    .container ul {\n      padding-left: 20px;\n      margin-bottom: 16px;\n    }\n    .container li {\n      margin-bottom: 8px;\n    }\n\n    /* emphasized text (headings, bold lines) */\n    .container .heading,\n    .container strong {\n      font-weight: 400;       /* same weight */\n      font-size: 18px;        /* smaller for emphasis */\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 8px;\n      display: block;\n    }\n    .container .subheading {\n      font-weight: 400;\n      font-size: 18px;\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 16px;\n      display: block;\n    }\n\n    /* note text */\n    .container .note {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #555;\n      margin: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class="container">\n    <div class="heading" style="font-size: 30px; font-weight: 600; margin-bottom: 8px;">\n      Guidelines for Address Documents\n    </div>\n\n    <div class="subheading" style="font-size: 22px; font-weight: 700; margin-bottom: 16px;">\n      Need help with this part? Here’s what you need to know.\n    </div>\n\n    <p>\n      The address proof documents and work address provided in this section are\n      essential for processing your visa application.\n    </p>\n\n    <p class="heading">\n      Please ensure the following:\n    </p>\n\n    <ul>\n      <li>All information entered is accurate and current.</li>\n      <li>Uploaded documents clearly match the address provided.</li>\n    </ul>\n\n    <p class="note">\n      Incomplete or mismatched details may lead to delays or rejection of your application.\n    </p>\n  </div>\n</body>\n</html>\n',
        title='Work/Education',
    )
    shared_travell_info: Optional[RootSharedTravellInfo] = Field(
        None, title='Shared Traveller Details'
    )
    itinerary_accomodation: Optional[RootItineraryAccomodation] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <title>Guidelines for Accommodation</title>\n  <style>\n    .container {\n      background-color: #fefefe;\n      padding: 16px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n\n      /* ← USE INTER FOR EVERYTHING */\n      font-family: \'Inter\', sans-serif;\n      color: #111;\n    }\n\n    /* regular form text */\n    .container p,\n    .container ul,\n    .container li {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #333;\n    }\n\n    .container ul {\n      padding-left: 20px;\n      margin: 0 0 16px;\n    }\n\n    .container li {\n      margin-bottom: 8px;\n    }\n\n    /* bold/strong text */\n    .container strong {\n      font-weight: 400;       /* same as regular */\n      font-size: 18px;        /* smaller for emphasis */\n      line-height: 34px;\n      letter-spacing: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class="container">\n    <!-- headings as “bold” spans at 18px, weight 400 -->\n    <div style="font-size: 30px; font-weight: 600; margin-bottom: 8px;">\n      Guidelines for Accommodation\n    </div>\n\n    <div style="font-size: 22px; font-weight: 700; margin-bottom: 16px;">\n      Need help with this part? Here’s what you need to know.\n    </div>\n\n    <p>\n      Before uploading your travel itinerary, make sure of the following:\n    </p>\n\n    <ul>\n      <li>\n        <strong>Submit Confirmed Bookings:</strong>\n        Upload hotel reservations, Airbnb confirmations, or any other proof of stay for the entire duration of your trip.\n      </li>\n      <li>\n        <strong>Cover All Destinations:</strong>\n        If you’re visiting multiple cities or countries, make sure you include accommodation details for each stop.\n      </li>\n      <li>\n        <strong>Match with Your Itinerary:</strong>\n        The check-in/check-out dates should align with your travel itinerary and transportation bookings.\n      </li>\n      <li>\n        <strong>Invitation:</strong>\n        If you\'re staying with friends or family, upload a signed Invitation Letter from your host, along with a copy of their ID or proof of residence.\n      </li>\n      <li class="highlight">\n        <strong>One Document or Multiple:</strong>\n        You can upload a single file with all your accommodation details, or multiple files, whatever is easier for you.\n      </li>\n      <li>\n        <strong>Don’t have confirmed bookings yet?</strong>\n        We can help create a sample plan for you, just choose our Add-On Service.\n      </li>\n    </ul>\n  </div>\n</body>\n</html>\n',
        title='Itinerary',
    )
    accomodation: Optional[RootAccomodation] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <title>Guidelines for Accommodation</title>\n  <style>\n    /* Container uses Inter for everything */\n    .container {\n      /* border-radius: 6px; */\n      background-color: #fefefe;\n      /* box-sizing: border-box; */\n      padding: 16px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      font-family: \'Inter\', sans-serif;\n      color: #111;\n    }\n\n    /* Regular form text */\n    .container p,\n    .container ul,\n    .container li {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #333;\n      margin: 0;\n    }\n\n    .container p {\n      margin-bottom: 16px;\n    }\n\n    .container ul {\n      padding-left: 20px;\n      margin-bottom: 16px;\n    }\n\n    .container li {\n      margin-bottom: 8px;\n    }\n\n    .container li.highlight {\n      /* inherits the same color as body text */\n      color: inherit;\n    }\n\n    /* Emphasized text (strong, headings) */\n    .container strong,\n    .container .heading {\n      font-weight: 400;       /* keep same weight */\n      font-size: 18px;        /* slightly smaller for emphasis */\n      line-height: 34px;\n      letter-spacing: 0;\n    }\n  </style>\n</head>\n<body>\n  <div class="container">\n    <!-- Use a helper class for headings -->\n    <div class="heading" style="font-size: 30px; font-weight: 600; margin-bottom: 8px;">\n      Guidelines for Accommodation\n    </div>\n\n    <div class="heading" style="font-size: 22px; font-weight: 700; margin-bottom: 16px;">\n      Need help with this part? Here’s what you need to know.\n    </div>\n\n    <p>\n      Before uploading your travel itinerary, make sure of the following:\n    </p>\n\n    <ul>\n      <li>\n        <strong>Submit Confirmed Bookings:</strong>\n        Upload hotel reservations, Airbnb confirmations, or any other proof of stay for the entire duration of your trip.\n      </li>\n      <li>\n        <strong>Cover All Destinations:</strong>\n        If you’re visiting multiple cities or countries, make sure you include accommodation details for each stop.\n      </li>\n      <li>\n        <strong>Match with Your Itinerary:</strong>\n        The check-in/check-out dates should align with your travel itinerary and transportation bookings.\n      </li>\n      <li>\n        <strong>Invitation:</strong>\n        If you\'re staying with friends or family, upload a signed Invitation Letter from your host, along with a copy of their ID or proof of residence.\n      </li>\n      <li class="highlight">\n        <strong>One Document or Multiple:</strong>\n        You can upload a single file with all your accommodation details, or multiple files, whatever is easier for you.\n      </li>\n      <li>\n        <strong>Don’t have confirmed bookings yet?</strong>\n        We can help create a sample plan for you, just choose our Add-On Service.\n      </li>\n    </ul>\n  </div>\n</body>\n</html>\n',
        title='Accomodation',
    )
    ticketing: Optional[RootTicketing] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <title>Guidelines for Ticketing</title>\n  <style>\n    .container {\n      background-color: #fefefe;\n      padding: 16px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      font-family: \'Inter\', sans-serif;\n      color: #111;\n    }\n\n    /* Regular form text */\n    .container p,\n    .container ul,\n    .container li {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #333;\n      margin: 0;\n    }\n    .container ul {\n      padding-left: 20px;\n      margin-bottom: 16px;\n    }\n    .container li {\n      margin-bottom: 8px;\n    }\n\n    /* Emphasized headings */\n    .container .heading {\n      font-weight: 400;\n      font-size: 18px;\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 8px;\n    }\n    .container .subheading {\n      font-weight: 400;\n      font-size: 18px;\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 16px;\n    }\n  </style>\n</head>\n<body>\n  <div class="container">\n    <div class="heading" style="font-size: 30px; font-weight: 600; margin-bottom: 8px;">Guidelines for Ticketing</div>\n\n    <div class="subheading" style="font-size: 22px; font-weight: 700; margin-bottom: 16px;">\n      Need help with this part? Here’s what you need to know.\n    </div>\n\n    <ul>\n      <li>\n        If you are travelling with multiple travellers, please make sure it contains the names of all the travellers.\n      </li>\n      <li>\n        If applicable, provide proof of intra-Schengen flight, train itinerary, or car rental.\n      </li>\n    </ul>\n  </div>\n</body>\n</html>\n',
        title='Flight Tickets',
    )
    travel_insurance: Optional[RootTravelInsurance] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <title>Guidelines for Travel Insurance</title>\n  <style>\n    .container {\n      background-color: #fefefe;\n      padding: 16px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      font-family: \'Inter\', sans-serif;\n      color: #111;\n    }\n\n    /* Regular form text */\n    .container p,\n    .container ul,\n    .container li {\n      font-weight: 400;\n      font-size: 20px;\n      line-height: 34px;\n      letter-spacing: 0;\n      color: #333;\n      margin: 0;\n    }\n    .container p {\n      margin-bottom: 16px;\n    }\n    .container ul {\n      padding-left: 20px;\n      margin-bottom: 16px;\n    }\n    .container li {\n      margin-bottom: 8px;\n    }\n\n    /* Emphasized headings */\n    .container .heading {\n      font-weight: 400;\n      font-size: 18px;\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 8px;\n    }\n    .container .subheading {\n      font-weight: 400;\n      font-size: 18px;\n      line-height: 34px;\n      letter-spacing: 0;\n      margin-bottom: 16px;\n    }\n\n    /* Link styling */\n    .container a {\n      color: #0969da;\n      text-decoration: underline;\n      word-break: break-word;\n    }\n  </style>\n</head>\n<body>\n  <div class="container">\n    <div class="heading" style="font-size: 30px; font-weight: 600; margin-bottom: 8px;">Guidelines for Travel Insurance</div>\n\n    <div class="subheading" style="font-size: 22px; font-weight: 700; margin-bottom: 16px;">\n      Need help with this part? Here’s what you need to know.\n    </div>\n\n    <p>\n      You can refer to the list of approved Indian Travel Insurances:<br />\n      <a\n        href="https://www.eda.admin.ch/dam/countries/countries-content/india/en/visa/SchengenList-_Travel_Insurance_CompaniesEN.pdf"\n        target="_blank"\n      >\n        https://www.eda.admin.ch/dam/countries/countries-content/india/en/visa/SchengenList-_Travel_Insurance_CompaniesEN.pdf\n      </a>\n    </p>\n\n    <ul>\n      <li>Minimum coverage of 30,000 Euro/50,000 USD/50,000 CHF per person</li>\n      <li>\n        Coverage of all expenses which might arise in connection with\n        repatriation for medical reasons, urgent medical attention and/or\n        emergency hospital treatment\n      </li>\n      <li>The insurance has to cover the entire stay in Schengen territory</li>\n      <li>\n        Applicants who wish to apply for a six-month or a one-year multiple visa\n        are not obliged to provide a 180 (365) days coverage. It is sufficient to\n        submit an insurance policy covering the first journey.\n      </li>\n    </ul>\n  </div>\n</body>\n</html>\n',
        title='Travel Insurance',
    )
    previous_visas: Optional[RootPreviousVisas] = Field(
        None, description='No Instructions Present', title='Previous Visas'
    )
    additional_details: Optional[RootAdditionalDetails] = Field(
        None, description='No Instructions Present', title='Additional Travel Details'
    )
    salary_slip: Optional[RootSalarySlip] = Field(
        None, description='No Instructions Present', title='Salary Slips'
    )
    bank_statement: Optional[RootBankStatement] = Field(
        None, description='No Instructions Present', title='Bank Statements'
    )
    itr_acknowledgement: Optional[RootItrAcknowledgement] = Field(
        None, description='No Instructions Present', title='ITR Acknowledgement'
    )
    declarations: Optional[RootDeclarations] = Field(
        None, description='No Instructions Present', title='Declarations'
    )
    addons: Optional[RootAddons] = Field(
        None, description='No Instructions Present', title='Add-On Cart'
    )
    consultant_info: Optional[RootConsultantInfo] = Field(
        None, description='No Instructions Present', title='TTK Consultant'
    )
    submit_info: Optional[RootSubmitInfo] = Field(
        None, description='No Instructions Present', title='Submit Application'
    )
    docket_info: Optional[RootDocketInfo] = Field(
        None, description='No Instructions Present', title='Docket'
    )
