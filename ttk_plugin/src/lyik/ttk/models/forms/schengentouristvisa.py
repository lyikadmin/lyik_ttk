# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-05-14T09:55:36+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any
from typing import Dict, List, Optional, Union

from pydantic import ConfigDict, EmailStr, Field
from pydantic import BaseModel

# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-06-12T07:59:57+00:00

class ACCOMODATIONOPTION(Enum):
    HAVE_DUMMY_ACCOMODATION = 'HAVE_DUMMY_ACCOMODATION'
    HAVE_CONFIRMED_ACCOMODATION = 'HAVE_CONFIRMED_ACCOMODATION'
    BOOK_DUMMY_ACCOMODATION = 'BOOK_DUMMY_ACCOMODATION'
    BOOK_CONFIRMED_ACCOMODATION = 'BOOK_CONFIRMED_ACCOMODATION'
    INVITED_ACCOMODATION = 'INVITED_ACCOMODATION'


class ADDONFLIGHTRESERVE(Enum):
    MAKE_RESERVATION = 'MAKE_RESERVATION'


class ADDONTRAVELINSURANCE(Enum):
    MAKE_INSURANCE = 'MAKE_INSURANCE'


class ADDONTRAVELITINERARY(Enum):
    MAKE_ITINERARY = 'MAKE_ITINERARY'


class ADDRESSPROOFTYPE(Enum):
    DL = 'DL'
    RATION = 'RATION'
    ELECTRICITY = 'ELECTRICITY'
    GAS = 'GAS'
    HR_LETTER = 'HR_LETTER'
    RENTAL_NOTARY = 'RENTAL_NOTARY'
    AADHAAR = 'AADHAAR'


class ADDPREVIOUSEMPSALARY(Enum):
    ADD_PREVIOUS_EMP_SALARY = 'ADD_PREVIOUS_EMP_SALARY'


class APPOINTMENTPREFERANCE(Enum):
    HAVE_APPOINTMENT = 'HAVE_APPOINTMENT'
    DIFFERENT_APPOINTMENT = 'DIFFERENT_APPOINTMENT'
    EARLIEST_APPOINTMENT = 'EARLIEST_APPOINTMENT'
    ASSISTED_APPOINTMENT = 'ASSISTED_APPOINTMENT'


class CANCELAPPOINTMENT(Enum):
    OK_APPOINTMENT = 'OK_APPOINTMENT'
    CANCEL_APPOINTMENT = 'CANCEL_APPOINTMENT'
    RESCHEDULE_APPOINTMENT = 'RESCHEDULE_APPOINTMENT'


class CONSENTVISAFEE(Enum):
    CONSENT_VISA_FEE = 'CONSENT_VISA_FEE'


class COUNTRY(Enum):
    AUT = 'AUT'
    BEL = 'BEL'
    CZE = 'CZE'
    DNK = 'DNK'
    EST = 'EST'
    FIN = 'FIN'
    FRA = 'FRA'
    DEU = 'DEU'
    GRC = 'GRC'
    HUN = 'HUN'
    ISL = 'ISL'
    ITA = 'ITA'
    LVA = 'LVA'
    LIE = 'LIE'
    LTU = 'LTU'
    LUX = 'LUX'
    MLT = 'MLT'
    NLD = 'NLD'
    NOR = 'NOR'
    POL = 'POL'
    PRT = 'PRT'
    SVK = 'SVK'
    SVN = 'SVN'
    ESP = 'ESP'
    SWE = 'SWE'
    CHE = 'CHE'


class COUNTRY3(Enum):
    AFG = 'AFG'
    ALB = 'ALB'
    DZA = 'DZA'
    ASM = 'ASM'
    AND = 'AND'
    AGO = 'AGO'
    AIA = 'AIA'
    ATA = 'ATA'
    ATG = 'ATG'
    ARG = 'ARG'
    ARM = 'ARM'
    ABW = 'ABW'
    AUS = 'AUS'
    AUT = 'AUT'
    AZE = 'AZE'
    BHS = 'BHS'
    BHR = 'BHR'
    BGD = 'BGD'
    BRB = 'BRB'
    BLR = 'BLR'
    BEL = 'BEL'
    BLZ = 'BLZ'
    BEN = 'BEN'
    BMU = 'BMU'
    BTN = 'BTN'
    BOL = 'BOL'
    BES = 'BES'
    BIH = 'BIH'
    BWA = 'BWA'
    BVT = 'BVT'
    BRA = 'BRA'
    IOT = 'IOT'
    BRN = 'BRN'
    BGR = 'BGR'
    BFA = 'BFA'
    BDI = 'BDI'
    CPV = 'CPV'
    KHM = 'KHM'
    CMR = 'CMR'
    CAN = 'CAN'
    CYM = 'CYM'
    CAF = 'CAF'
    TCD = 'TCD'
    CHL = 'CHL'
    CHN = 'CHN'
    CXR = 'CXR'
    CCK = 'CCK'
    COL = 'COL'
    COM = 'COM'
    COD = 'COD'
    COG = 'COG'
    COK = 'COK'
    CRI = 'CRI'
    HRV = 'HRV'
    CUB = 'CUB'
    CUW = 'CUW'
    CYP = 'CYP'
    CZE = 'CZE'
    CIV = 'CIV'
    DNK = 'DNK'
    DJI = 'DJI'
    DMA = 'DMA'
    DOM = 'DOM'
    ECU = 'ECU'
    EGY = 'EGY'
    SLV = 'SLV'
    GNQ = 'GNQ'
    ERI = 'ERI'
    EST = 'EST'
    SWZ = 'SWZ'
    ETH = 'ETH'
    FLK = 'FLK'
    FRO = 'FRO'
    FJI = 'FJI'
    FIN = 'FIN'
    FRA = 'FRA'
    GUF = 'GUF'
    PYF = 'PYF'
    ATF = 'ATF'
    GAB = 'GAB'
    GMB = 'GMB'
    GEO = 'GEO'
    DEU = 'DEU'
    GHA = 'GHA'
    GIB = 'GIB'
    GRC = 'GRC'
    GRL = 'GRL'
    GRD = 'GRD'
    GLP = 'GLP'
    GUM = 'GUM'
    GTM = 'GTM'
    GGY = 'GGY'
    GIN = 'GIN'
    GNB = 'GNB'
    GUY = 'GUY'
    HTI = 'HTI'
    HMD = 'HMD'
    VAT = 'VAT'
    HND = 'HND'
    HKG = 'HKG'
    HUN = 'HUN'
    ISL = 'ISL'
    IND = 'IND'
    IDN = 'IDN'
    IRN = 'IRN'
    IRQ = 'IRQ'
    IRL = 'IRL'
    IMN = 'IMN'
    ISR = 'ISR'
    ITA = 'ITA'
    JAM = 'JAM'
    JPN = 'JPN'
    JEY = 'JEY'
    JOR = 'JOR'
    KAZ = 'KAZ'
    KEN = 'KEN'
    KIR = 'KIR'
    PRK = 'PRK'
    KOR = 'KOR'
    KWT = 'KWT'
    KGZ = 'KGZ'
    LAO = 'LAO'
    LVA = 'LVA'
    LBN = 'LBN'
    LSO = 'LSO'
    LBR = 'LBR'
    LBY = 'LBY'
    LIE = 'LIE'
    LTU = 'LTU'
    LUX = 'LUX'
    MAC = 'MAC'
    MDG = 'MDG'
    MWI = 'MWI'
    MYS = 'MYS'
    MDV = 'MDV'
    MLI = 'MLI'
    MLT = 'MLT'
    MHL = 'MHL'
    MTQ = 'MTQ'
    MRT = 'MRT'
    MUS = 'MUS'
    MYT = 'MYT'
    MEX = 'MEX'
    FSM = 'FSM'
    MDA = 'MDA'
    MCO = 'MCO'
    MNG = 'MNG'
    MNE = 'MNE'
    MSR = 'MSR'
    MAR = 'MAR'
    MOZ = 'MOZ'
    MMR = 'MMR'
    NAM = 'NAM'
    NRU = 'NRU'
    NPL = 'NPL'
    NLD = 'NLD'
    NCL = 'NCL'
    NZL = 'NZL'
    NIC = 'NIC'
    NER = 'NER'
    NGA = 'NGA'
    NIU = 'NIU'
    NFK = 'NFK'
    MNP = 'MNP'
    NOR = 'NOR'
    OMN = 'OMN'
    PAK = 'PAK'
    PLW = 'PLW'
    PSE = 'PSE'
    PAN = 'PAN'
    PNG = 'PNG'
    PRY = 'PRY'
    PER = 'PER'
    PHL = 'PHL'
    PCN = 'PCN'
    POL = 'POL'
    PRT = 'PRT'
    PRI = 'PRI'
    QAT = 'QAT'
    MKD = 'MKD'
    ROU = 'ROU'
    RUS = 'RUS'
    RWA = 'RWA'
    REU = 'REU'
    BLM = 'BLM'
    SHN = 'SHN'
    KNA = 'KNA'
    LCA = 'LCA'
    MAF = 'MAF'
    SPM = 'SPM'
    VCT = 'VCT'
    WSM = 'WSM'
    SMR = 'SMR'
    STP = 'STP'
    SAU = 'SAU'
    SEN = 'SEN'
    SRB = 'SRB'
    SYC = 'SYC'
    SLE = 'SLE'
    SGP = 'SGP'
    SXM = 'SXM'
    SVK = 'SVK'
    SVN = 'SVN'
    SLB = 'SLB'
    SOM = 'SOM'
    ZAF = 'ZAF'
    SGS = 'SGS'
    SSD = 'SSD'
    ESP = 'ESP'
    LKA = 'LKA'
    SDN = 'SDN'
    SUR = 'SUR'
    SJM = 'SJM'
    SWE = 'SWE'
    CHE = 'CHE'
    SYR = 'SYR'
    TWN = 'TWN'
    TJK = 'TJK'
    TZA = 'TZA'
    THA = 'THA'
    TLS = 'TLS'
    TGO = 'TGO'
    TKL = 'TKL'
    TON = 'TON'
    TTO = 'TTO'
    TUN = 'TUN'
    TUR = 'TUR'
    TKM = 'TKM'
    TCA = 'TCA'
    TUV = 'TUV'
    UGA = 'UGA'
    UKR = 'UKR'
    ARE = 'ARE'
    GBR = 'GBR'
    UMI = 'UMI'
    USA = 'USA'
    URY = 'URY'
    UZB = 'UZB'
    VUT = 'VUT'
    VEN = 'VEN'
    VNM = 'VNM'
    VGB = 'VGB'
    VIR = 'VIR'
    WLF = 'WLF'
    ESH = 'ESH'
    YEM = 'YEM'
    ZMB = 'ZMB'
    ZWE = 'ZWE'


class EMPTYOPTION(Enum):
    YES = 'YES'


class FLIGHTTICKETOPTION(Enum):
    HAVE_DUMMY_TICKET = 'HAVE_DUMMY_TICKET'
    HAVE_CONFIRMED_TICKET = 'HAVE_CONFIRMED_TICKET'
    TTK_BOOK_DUMMY_TICKET = 'TTK_BOOK_DUMMY_TICKET'
    TTK_BOOK_CONFIRMED_TICKET = 'TTK_BOOK_CONFIRMED_TICKET'


class GENDER(Enum):
    M = 'M'
    F = 'F'
    T = 'T'
    O = 'O'


class HOURSELECT(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_12 = 12
    integer_13 = 13
    integer_14 = 14
    integer_15 = 15
    integer_16 = 16
    integer_17 = 17
    integer_18 = 18
    integer_19 = 19
    integer_20 = 20
    integer_21 = 21
    integer_22 = 22
    integer_23 = 23


class INDIASTATES(Enum):
    ANDAMAN___NICOBAR_ISLANDS = 'ANDAMAN & NICOBAR ISLANDS'
    ANDHRA_PRADESH = 'ANDHRA PRADESH'
    ARUNACHAL_PRADESH = 'ARUNACHAL PRADESH'
    ASSAM = 'ASSAM'
    BIHAR = 'BIHAR'
    CHANDIGARH = 'CHANDIGARH'
    CHATTISGARH = 'CHATTISGARH'
    DADRA___NAGAR_HAVELI = 'DADRA & NAGAR HAVELI'
    DAMAN___DIU = 'DAMAN & DIU'
    DELHI = 'DELHI'
    GOA = 'GOA'
    GUJARAT = 'GUJARAT'
    HARYANA = 'HARYANA'
    HIMACHAL_PRADESH = 'HIMACHAL PRADESH'
    JAMMU___KASHMIR = 'JAMMU & KASHMIR'
    JHARKHAND = 'JHARKHAND'
    KARNATAKA = 'KARNATAKA'
    KERALA = 'KERALA'
    LAKSHADWEEP = 'LAKSHADWEEP'
    MADHYA_PRADESH = 'MADHYA PRADESH'
    MAHARASHTRA = 'MAHARASHTRA'
    MANIPUR = 'MANIPUR'
    MEGHALAYA = 'MEGHALAYA'
    MIZORAM = 'MIZORAM'
    NAGALAND = 'NAGALAND'
    ODISHA = 'ODISHA'
    PONDICHERRY = 'PONDICHERRY'
    PUNJAB = 'PUNJAB'
    RAJASTHAN = 'RAJASTHAN'
    SIKKIM = 'SIKKIM'
    TAMIL_NADU = 'TAMIL NADU'
    TELANGANA = 'TELANGANA'
    TRIPURA = 'TRIPURA'
    UTTAR_PRADESH = 'UTTAR PRADESH'
    UTTARAKHAND = 'UTTARAKHAND'
    WEST_BENGAL = 'WEST BENGAL'


class INSURANCEOPTION(Enum):
    HAVE_INSURANCE = 'HAVE_INSURANCE'
    BUY_INSURANCE = 'BUY_INSURANCE'
    DO_LATER = 'DO_LATER'


class INSURANCEPLAN(Enum):
    USD50K = 'USD50K'
    USD100K = 'USD100K'
    USD500K = 'USD500K'
    USD1M = 'USD1M'


class ITINERARYOPTION(Enum):
    HAVE_ITINERARY = 'HAVE_ITINERARY'
    CREATE_ITINERARY = 'CREATE_ITINERARY'


class ITROPTION(Enum):
    SKIP = 'SKIP'
    NO_ITR = 'NO_ITR'
    HAVE = 'HAVE'


class MINUTESELECT(Enum):
    integer_0 = 0
    integer_5 = 5
    integer_10 = 10
    integer_15 = 15
    integer_20 = 20
    integer_25 = 25
    integer_30 = 30
    integer_35 = 35
    integer_40 = 40
    integer_45 = 45
    integer_50 = 50
    integer_55 = 55


class MODEOFCALL(Enum):
    MS_TEAMS = 'MS_TEAMS'
    ZOOM = 'ZOOM'
    GOOGLE_MEET = 'GOOGLE_MEET'
    PHONE = 'PHONE'


class MONTHOPTION(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_12 = 12


class OPTION(Enum):
    YES = 'YES'
    NO = 'NO'


class OPTION2(Enum):
    YES = 'YES'
    NO = 'NO'
    UNKNOWN = 'UNKNOWN'


class PASSPORTTYPE(Enum):
    REGULAR = 'REGULAR'
    OFFICIAL = 'OFFICIAL'
    DIPLOMATIC = 'DIPLOMATIC'
    EMERGENCY = 'EMERGENCY'
    COLLECTIVE = 'COLLECTIVE'
    E_PASSPORT = 'E_PASSPORT'


class PREFLOC(Enum):
    Bengaluru = 'Bengaluru'
    Hyderabad = 'Hyderabad'
    Chennai = 'Chennai'


class PRINTPHOTO(Enum):
    PRINT_PHOTO = 'PRINT_PHOTO'


class PURPOSEOFVISAORTRAVEL(Enum):
    VISIT_FAMILY_FRIENDS = 'VISIT_FAMILY_FRIENDS'
    TOURISM = 'TOURISM'
    BUSINESS = 'BUSINESS'
    CULTURAL = 'CULTURAL'
    OFFICIAL_VISIT = 'OFFICIAL_VISIT'
    STUDY = 'STUDY'
    MEDICAL = 'MEDICAL'
    SPORTS = 'SPORTS'
    AIRPORT_TRANSIT = 'AIRPORT_TRANSIT'
    OTHER = 'OTHER'


class RELATIONSHIP(Enum):
    BROTHER = 'BROTHER'
    SISTER = 'SISTER'
    BROTHER_IN_LAW = 'BROTHER_IN_LAW'
    SISTER_IN_LAW = 'SISTER_IN_LAW'
    SPOUSE = 'SPOUSE'
    SON = 'SON'
    DAUGHTER = 'DAUGHTER'
    FRIEND = 'FRIEND'
    OTHERS = 'OTHERS'


class RELATIONSHIPWITHEU(Enum):
    SPOUSE = 'SPOUSE'
    CHILD = 'CHILD'
    GRANDCHILD = 'GRANDCHILD'
    DEPENDENT_ASCENDANT = 'DEPENDENT_ASCENDANT'
    REGISTERED_PARTNER = 'REGISTERED_PARTNER'
    OTHER = 'OTHER'


class SAMEASPASSADDR(Enum):
    SAME_AS_PASS_ADDR = 'SAME_AS_PASS_ADDR'


class SAMEASPRIMARYTRAVELLER(Enum):
    SAME_AS_PRIMARY_TRAVELLER = 'SAME_AS_PRIMARY_TRAVELLER'


class SAMEASPRIMARYTRAVELLERINSURANCE(Enum):
    SAME_AS_PRIMARY_TRAVELLER_INSURANCE = 'SAME_AS_PRIMARY_TRAVELLER_INSURANCE'


class SAMEASPRIMARYTRAVELLERITINERARY(Enum):
    SAME_AS_PRIMARY_TRAVELLER_ITINERARY = 'SAME_AS_PRIMARY_TRAVELLER_ITINERARY'


class SAMEASPRIMARYTRAVELLERTICKETING(Enum):
    SAME_AS_PRIMARY_TRAVELLER_TICKETING = 'SAME_AS_PRIMARY_TRAVELLER_TICKETING'


class SKIPBANKSTATEMENT(Enum):
    SKIP = 'SKIP'
    DONT_SKIP = 'DONT_SKIP'


class SKIPSALARY(Enum):
    SKIP = 'SKIP'
    DONT_SKIP = 'DONT_SKIP'


class SPONSORSHIPOPTIONS(Enum):
    PERSONALLY_COVERED = 'PERSONALLY_COVERED'
    SPONSOR_COVERED = 'SPONSOR_COVERED'
    INVITER_COVERED = 'INVITER_COVERED'
    OTHER = 'OTHER'


class SUPPORTMEANSSELF(Enum):
    CASH = 'CASH'
    TRAVELLERS_CHEQUES = 'TRAVELLERS_CHEQUES'
    CREDIT_CARD = 'CREDIT_CARD'
    PREPAID_ACCOMMODATION = 'PREPAID_ACCOMMODATION'
    PREPAID_TRANSPORT = 'PREPAID_TRANSPORT'
    OTHER = 'OTHER'


class SUPPORTMEANSSPONSOR(Enum):
    CASH = 'CASH'
    ACCOMMODATION_PROVIDED = 'ACCOMMODATION_PROVIDED'
    ALL_EXPENSES_COVERED = 'ALL_EXPENSES_COVERED'
    PREPAID_TRANSPORT = 'PREPAID_TRANSPORT'
    OTHER = 'OTHER'


class VISAMODE(Enum):
    Sticker = 'Sticker'
    Evisa = 'Evisa'
    Online = 'Online'


class VISAPOLICY1(Enum):
    VISA_FEE_NONREFUNDABLE = 'VISA_FEE_NONREFUNDABLE'


class VISAPOLICY2(Enum):
    MULTIPLE_ENTRY_INSURANCE = 'MULTIPLE_ENTRY_INSURANCE'


class VISAPOLICY3(Enum):
    DATA_CONSENT_AND_VIS = 'DATA_CONSENT_AND_VIS'


class VISAPROCESSINGTYPE(Enum):
    Normal = 'Normal'
    Express = 'Express'


class VISASTATUS(Enum):
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'


class VISATYPE(Enum):
    Tourist = 'Tourist'
    Business = 'Business'
    Work = 'Work'
    Dependent = 'Dependent'
    Visitor = 'Visitor'
    Student = 'Student'
    Sports = 'Sports'


class YEAROPTION(Enum):
    integer_1900 = 1900
    integer_1901 = 1901
    integer_1902 = 1902
    integer_1903 = 1903
    integer_1904 = 1904
    integer_1905 = 1905
    integer_1906 = 1906
    integer_1907 = 1907
    integer_1908 = 1908
    integer_1909 = 1909
    integer_1910 = 1910
    integer_1911 = 1911
    integer_1912 = 1912
    integer_1913 = 1913
    integer_1914 = 1914
    integer_1915 = 1915
    integer_1916 = 1916
    integer_1917 = 1917
    integer_1918 = 1918
    integer_1919 = 1919
    integer_1920 = 1920
    integer_1921 = 1921
    integer_1922 = 1922
    integer_1923 = 1923
    integer_1924 = 1924
    integer_1925 = 1925
    integer_1926 = 1926
    integer_1927 = 1927
    integer_1928 = 1928
    integer_1929 = 1929
    integer_1930 = 1930
    integer_1931 = 1931
    integer_1932 = 1932
    integer_1933 = 1933
    integer_1934 = 1934
    integer_1935 = 1935
    integer_1936 = 1936
    integer_1937 = 1937
    integer_1938 = 1938
    integer_1939 = 1939
    integer_1940 = 1940
    integer_1941 = 1941
    integer_1942 = 1942
    integer_1943 = 1943
    integer_1944 = 1944
    integer_1945 = 1945
    integer_1946 = 1946
    integer_1947 = 1947
    integer_1948 = 1948
    integer_1949 = 1949
    integer_1950 = 1950
    integer_1951 = 1951
    integer_1952 = 1952
    integer_1953 = 1953
    integer_1954 = 1954
    integer_1955 = 1955
    integer_1956 = 1956
    integer_1957 = 1957
    integer_1958 = 1958
    integer_1959 = 1959
    integer_1960 = 1960
    integer_1961 = 1961
    integer_1962 = 1962
    integer_1963 = 1963
    integer_1964 = 1964
    integer_1965 = 1965
    integer_1966 = 1966
    integer_1967 = 1967
    integer_1968 = 1968
    integer_1969 = 1969
    integer_1970 = 1970
    integer_1971 = 1971
    integer_1972 = 1972
    integer_1973 = 1973
    integer_1974 = 1974
    integer_1975 = 1975
    integer_1976 = 1976
    integer_1977 = 1977
    integer_1978 = 1978
    integer_1979 = 1979
    integer_1980 = 1980
    integer_1981 = 1981
    integer_1982 = 1982
    integer_1983 = 1983
    integer_1984 = 1984
    integer_1985 = 1985
    integer_1986 = 1986
    integer_1987 = 1987
    integer_1988 = 1988
    integer_1989 = 1989
    integer_1990 = 1990
    integer_1991 = 1991
    integer_1992 = 1992
    integer_1993 = 1993
    integer_1994 = 1994
    integer_1995 = 1995
    integer_1996 = 1996
    integer_1997 = 1997
    integer_1998 = 1998
    integer_1999 = 1999
    integer_2000 = 2000
    integer_2001 = 2001
    integer_2002 = 2002
    integer_2003 = 2003
    integer_2004 = 2004
    integer_2005 = 2005
    integer_2006 = 2006
    integer_2007 = 2007
    integer_2008 = 2008
    integer_2009 = 2009
    integer_2010 = 2010
    integer_2011 = 2011
    integer_2012 = 2012
    integer_2013 = 2013
    integer_2014 = 2014
    integer_2015 = 2015
    integer_2016 = 2016
    integer_2017 = 2017
    integer_2018 = 2018
    integer_2019 = 2019
    integer_2020 = 2020
    integer_2021 = 2021
    integer_2022 = 2022
    integer_2023 = 2023
    integer_2024 = 2024
    integer_2025 = 2025


class RootAdditionalDetailsApplicationDetail(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    application_on_behalf: Optional[OPTION] = Field(
        None,
        description='Select Option',
        title='Are you submitting this Schengen Visa application on behalf of the other person?',
    )


class RootAdditionalDetailsFamilyMemberOfEu(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    is_family_member_of_eu: Optional[OPTION] = Field(
        None,
        description='Select Option',
        title='Do you have a family member who is an EU, EEA, or CH Citizen or a national of the United Kingdom who is a beneficiary of the agreement between the Swiss Confederation and the United Kingdom?',
    )
    given_name: Optional[str] = Field(
        None,
        description='Enter Given Name of the Family Member',
        title='Given Name of the Family Member',
    )
    surname: Optional[str] = Field(
        None,
        description='Enter Surname of the Family Member',
        title='Surname of the Family Member',
    )
    nationality: Optional[str] = Field(
        None,
        description='Enter Nationality of the Family Member',
        title='Nationality of the Family Member',
    )
    date_of_birth: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Birth of Family Member'
    )
    travel_document_id: Optional[str] = Field(
        None,
        description='Enter Travel document or ID card number',
        title='Travel document or ID card number',
    )
    relationship: Optional[RELATIONSHIPWITHEU] = Field(
        None, description='Select Option', title='Relationship of Family Member'
    )


class RootAdditionalDetailsNationalId(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    aadhaar_number: Optional[str] = Field(
        None, description='Enter Aadhaar Card Number', title='Aadhaar Card Number'
    )
    aadhaar_upload: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Aadhaar Card Upload', title='Aadhaar Card Upload'
    )


class RootAdditionalDetailsOtherCountryTravel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    travelling_to_other_country: Optional[OPTION] = Field(
        None,
        description='Select Option',
        title='Are you traveling to any other country during this trip, apart from Schengen area?',
    )
    country_of_travel: Optional[COUNTRY3] = Field(
        None, description='Select Option', title='Country of Travel'
    )
    valid_visa_for_country: Optional[OPTION] = Field(
        None,
        description='Select Option',
        title='Do you have a valid visa for the country mentioned above?',
    )
    disclaimer: Optional[str] = Field(
        None, description='Disclaimer', title='Display Field'
    )
    visa_copy_upload: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Visa Copy', title='Visa Copy'
    )
    visa_start_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Visa Start Date'
    )
    visa_end_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Visa End Date'
    )


class RootAdditionalDetailsSponsorshipDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    sponsorship_option: Optional[SPONSORSHIPOPTIONS] = Field(
        None,
        description='Select Option',
        title='Cost of travelling is and living during stay is covered by:',
    )
    other_sponsor: Optional[str] = Field(
        None, description='Enter Other Sponsor', title='Other Sponsor'
    )
    support_means_self: Optional[SUPPORTMEANSSELF] = Field(
        None, description='Select Option', title='Means of Support (Self)'
    )
    other_support_self: Optional[str] = Field(
        None,
        description='Enter Other means of support (Self)',
        title='Other means of support (Self)',
    )
    support_means_sponsor: Optional[SUPPORTMEANSSPONSOR] = Field(
        None, description='Select Option', title='Means of Support (Sponsor)'
    )
    other_support_sponsor: Optional[str] = Field(
        None,
        description='Enter Other means of support (Sponsor)',
        title='Other means of support (Sponsor)',
    )


class RootAddonsAddonsView(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    addon_display: Optional[str] = Field(
        None, description='Addons', title='Display Field'
    )
    ttk_fee_display: Optional[str] = Field(
        None, description='TTK Fee', title='Display Field'
    )
    discount_display: Optional[str] = Field(
        None, description='Discount Percentage', title='Display Field'
    )
    amount_display: Optional[str] = Field(
        None, description='Amount', title='Display Field'
    )
    addon_1: Optional[ADDONTRAVELITINERARY] = Field(
        None, description='Select Option', title=''
    )
    ttk_fee_1: Optional[str] = Field(None, description='Enter TTK Fee', title='TTK Fee')
    discount_1: Optional[str] = Field(
        None, description='Enter Discount %', title='Discount %'
    )
    amount_1: Optional[str] = Field(None, description='Enter Amount', title='Amount')
    addon_2: Optional[ADDONTRAVELINSURANCE] = Field(
        None, description='Select Option', title=''
    )
    ttk_fee_2: Optional[str] = Field(None, description='Enter TTK Fee', title='TTK Fee')
    discount_2: Optional[str] = Field(
        None, description='Enter Discount %', title='Discount %'
    )
    amount_2: Optional[str] = Field(None, description='Enter Amount', title='Amount')
    addon_3: Optional[ADDONFLIGHTRESERVE] = Field(
        None, description='Select Option', title=''
    )
    ttk_fee_3: Optional[str] = Field(None, description='Enter TTK Fee', title='TTK Fee')
    discount_3: Optional[str] = Field(
        None, description='Enter Discount %', title='Discount %'
    )
    amount_3: Optional[str] = Field(None, description='Enter Amount', title='Amount')
    hidden1: Optional[str] = Field(None, title='')
    hidden2: Optional[str] = Field(None, title='')
    hidden3: Optional[str] = Field(None, title='')
    total_amount: Optional[str] = Field(
        None, description='Enter Total Amount', title='Total Amount'
    )


class RootAppointmentAppointmentLocations(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    check_1: Optional[EMPTYOPTION] = Field(None, description='Select Option', title='')
    suggested_location_1: Optional[str] = Field(
        None, description='Enter Suggested Location 1', title='Suggested Location 1'
    )
    date_of_appointment_1: Optional[str] = Field(
        None, description='Enter Date of Appointment 1', title='Date of Appointment 1'
    )
    check_2: Optional[EMPTYOPTION] = Field(None, description='Select Option', title='')
    suggested_location_2: Optional[str] = Field(
        None, description='Enter Suggested Location 2', title='Suggested Location 2'
    )
    date_of_appointment_2: Optional[str] = Field(
        None, description='Enter Date of Appointment 2', title='Date of Appointment 2'
    )
    check_3: Optional[EMPTYOPTION] = Field(None, description='Select Option', title='')
    suggested_location_3: Optional[str] = Field(
        None, description='Enter Suggested Location 3', title='Suggested Location 3'
    )
    date_of_appointment_3: Optional[str] = Field(
        None, description='Enter Date of Appointment 3', title='Date of Appointment 3'
    )


class RootAppointmentAppointmentLovationsEarliest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    check_1: Optional[EMPTYOPTION] = Field(None, description='Select Option', title='')
    suggested_location_1: Optional[str] = Field(
        None, description='Enter Suggested Location 1', title='Suggested Location 1'
    )
    date_of_appointment_1: Optional[str] = Field(
        None, description='Enter Date of Appointment 1', title='Date of Appointment 1'
    )
    check_2: Optional[EMPTYOPTION] = Field(None, description='Select Option', title='')
    suggested_location_2: Optional[str] = Field(
        None, description='Enter Suggested Location 2', title='Suggested Location 2'
    )
    date_of_appointment_2: Optional[str] = Field(
        None, description='Enter Date of Appointment 2', title='Date of Appointment 2'
    )
    check_3: Optional[EMPTYOPTION] = Field(None, description='Select Option', title='')
    suggested_location_3: Optional[str] = Field(
        None, description='Enter Suggested Location 3', title='Suggested Location 3'
    )
    date_of_appointment_3: Optional[str] = Field(
        None, description='Enter Date of Appointment 3', title='Date of Appointment 3'
    )


class RootAppointmentAppointmentPreferance(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    appointment_preferance: Optional[APPOINTMENTPREFERANCE] = Field(
        'HAVE_APPOINTMENT', description='Select Option', title=''
    )


class RootAppointmentAppointmentScheduled(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    scheduled_location: Optional[PREFLOC] = Field(
        None, description='Select Option', title='Scheduled Location'
    )
    scheduled_hour: Optional[HOURSELECT] = Field(
        None, description='Select Option', title='Scheduled Time (Hour)'
    )
    upload_appointment: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Appointment', title='Upload Appointment'
    )
    scheduled_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Scheduled Date'
    )
    scheduled_minute: Optional[MINUTESELECT] = Field(
        None, description='Select Option', title='Scheduled Time (Minute)'
    )


class RootAppointmentCancelAppointment(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    cancel_display: Optional[str] = Field(
        None,
        description='I hereby agree and confirm the cancellation of my existing appointment scheduled for visa filing. I understand that this may affect the validity or reuse of the documents already prepared for the current application. Should a new application be required due to changes in travel details, such as revised travel dates, etc.,, I agree to pay the applicable additional service fee to TTK. I also acknowledge that any fees previously paid to the Visa Application Center may or may not be refunded, subject to the policies and discretion of the Visa Application Center or the respective foreign mission.',
        title='Display Field',
    )
    reschedule_display: Optional[str] = Field(
        None,
        description='I hereby agree and confirm to reschedule my existing appointment. I understand that this may affect the validity or reuse of the documents already prepared for the current application. Should a new application be required due to changes in travel details, such as revised travel dates, etc.,, I agree to pay the applicable additional service fee to TTK. I also acknowledge that any fees previously paid to the Visa Application Center may or may not be refunded, subject to the policies and discretion of the Visa Application Center or the respective foreign mission. I confirm TTK to charge rescheduling charges as additional fees, which includes a professional fee of TTK and the fees payable to Visa application center (as applicable). ',
        title='Display Field',
    )
    cancel_appointment: Optional[CANCELAPPOINTMENT] = Field(
        'OK_APPOINTMENT', description='Select Option', title=''
    )


class RootAppointmentEarliestAvailableAppointment(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    earliest_appointment_availability: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Earliest Appointment Availability'
    )
    appointment_availability_location: Optional[str] = Field(
        None, description='Enter Appointment Location', title='Appointment Location'
    )


class RootAttachmentsInfopaneAttachDocumentsAttachmentgroupAttachment(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    file_title: Optional[str] = Field(
        None, description='Enter Name of Document', title='Name of Document'
    )
    file_description: Optional[str] = Field(
        None, description='Enter Document Description', title='Document Description'
    )
    attached_file: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter File Upload', title='File Upload'
    )


class RootBankStatementStatementsBankstatementgroupAccountDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    traveller_name: Optional[str] = Field(
        None,
        description='Enter Name of Traveller as in Bank Statement',
        title='Name of Traveller as in Bank Statement',
    )
    traveller_address: Optional[str] = Field(
        None,
        description='Enter Address of Traveller as in Bank Statement',
        title='Address of Traveller as in Bank Statement',
    )
    statement_start_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Start Date of Statement Period'
    )
    statement_end_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='End Date of Statement Period'
    )
    closing_balance: Optional[float] = Field(
        None,
        description='Enter Closing Balance Available',
        title='Closing Balance Available',
    )
    sudden_deposits: Optional[str] = Field(
        None,
        description='Enter Sudden Deposits (if any)',
        title='Sudden Deposits (if any)',
    )


class RootBriefingCallsBriefingcallgroupBriefingCall(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    schedule_on: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Schedule on'
    )
    scheduled_hour: Optional[HOURSELECT] = Field(
        None, description='Select Option', title='Scheduled Time (Hour)'
    )
    scheduled_minute: Optional[MINUTESELECT] = Field(
        None, description='Select Option', title='Scheduled Time (Minute)'
    )
    mode_of_call: Optional[MODEOFCALL] = Field(
        None, description='Select Option', title='Mode of Call'
    )


class RootCotraveller(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    same_as_primary_itinerary: Optional[SAMEASPRIMARYTRAVELLERITINERARY] = Field(
        None, description='Select Option', title=''
    )
    same_as_primary_ticketing: Optional[SAMEASPRIMARYTRAVELLERTICKETING] = Field(
        None, description='Select Option', title=''
    )
    same_as_primary_insurance: Optional[SAMEASPRIMARYTRAVELLERINSURANCE] = Field(
        None, description='Select Option', title=''
    )


class RootCredentialsCredentials(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    username: Optional[str] = Field(
        None, description='Enter Login / User name', title='Login / User name'
    )
    password: Optional[str] = Field(
        None, description='Enter Password', title='Password'
    )


class RootCredentialsSecurityQuestionsSecurityquestiongroupSecurityQuestion(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    question: Optional[str] = Field(
        None, description='Enter Security Question', title='Security Question'
    )
    answer: Optional[str] = Field(None, description='Enter Answer', title='Answer')


class RootDeclarationsVisaDeclaration(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_policy_1: Optional[VISAPOLICY1] = Field(
        None, description='Select Option', title=''
    )
    visa_policy_2: Optional[VISAPOLICY2] = Field(
        None, description='Select Option', title=''
    )
    visa_policy_3: Optional[VISAPOLICY3] = Field(
        None, description='Select Option', title=''
    )


class RootDownloadsCardBuilder(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    operation_card: Optional[str] = Field(
        None, description='Select Operation type', title='Select Operation'
    )


class RootItineraryAccomodationItineraryDetailsItinerarygroupBookConfirmedAccomodation(
    BaseModel
):
    model_config = ConfigDict(
        extra='allow',
    )
    given_name: Optional[str] = Field(
        None, description='Enter Given Name', title='Given Name'
    )
    surname: Optional[str] = Field(None, description='Enter Surname', title='Surname')
    passport_number: Optional[str] = Field(
        None, description='Enter Passport Number', title='Passport Number'
    )
    country: Optional[str] = Field(None, description='Enter Country', title='Country')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    number_of_pax: Optional[str] = Field(
        None, description='Enter Number of Pax', title='Number of Pax'
    )
    date_of_arrival: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Arrival'
    )
    date_of_departure: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Departure'
    )


class RootItineraryAccomodationItineraryDetailsItinerarygroupBookDummyAccomodation(
    BaseModel
):
    model_config = ConfigDict(
        extra='allow',
    )
    given_name: Optional[str] = Field(
        None, description='Enter Given Name', title='Given Name'
    )
    surname: Optional[str] = Field(None, description='Enter Surname', title='Surname')
    passport_number: Optional[str] = Field(
        None, description='Enter Passport Number', title='Passport Number'
    )
    country: Optional[str] = Field(None, description='Enter Country', title='Country')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    number_of_pax: Optional[str] = Field(
        None, description='Enter Number of Pax', title='Number of Pax'
    )
    date_of_arrival: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Arrival'
    )
    date_of_departure: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Departure'
    )


class RootItineraryAccomodationItineraryDetailsItinerarygroupInviterDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    inviter_biopage: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description="Upload Bio Page of Inviter's Passport",
        title="Bio Page of Inviter's Passport",
    )
    visacopy_permit_card: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload Visa Copy or Resident Permit Card',
        title='Visa Copy or Resident Permit Card',
    )
    accomodation_proof: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload Accomodation Proof', title='Accommodation proof'
    )
    inviter_name: Optional[str] = Field(
        None, description='Enter Name of Inviter', title='Name of Inviter'
    )
    inviter_address: Optional[str] = Field(
        None, description='Enter Address of the Inviter', title='Address of the Inviter'
    )
    mobile_number: Optional[str] = Field(
        None,
        description='Enter Mobile/Telephone Number',
        title='Mobile/Telephone Number',
    )
    email_id: Optional[str] = Field(
        None, description='Enter Email id', title='Email id'
    )
    relationship: Optional[RELATIONSHIP] = Field(
        None, description='Select Option', title='Relationship'
    )


class RootItineraryAccomodationItineraryDetailsItinerarygroupItineraryInformation(
    BaseModel
):
    model_config = ConfigDict(
        extra='allow',
    )
    country: Optional[str] = Field(None, description='Enter Country', title='Country')
    date_of_arrival: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Arrival'
    )
    date_of_departure: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Departure'
    )
    city: Optional[str] = Field(None, description='Enter City', title='City')
    placed_to_visit: Optional[str] = Field(
        None,
        description='List down all the places, you intend to visit in this country.',
        title='Places To Visit',
    )
    accomodation_option: Optional[ACCOMODATIONOPTION] = Field(
        'HAVE_DUMMY_ACCOMODATION', description='Select Option', title=''
    )
    upload_dummy_accomodation: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload Accomodation Document pdf',
        title='Upload Dummy Accomodation',
    )
    upload_confirmed_accomodation: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload Accomodation Document pdf',
        title='Upload Confirmed Accomodation',
    )


class RootItrAcknowledgement(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    itr_option: Optional[ITROPTION] = Field(None, description='Select Option', title='')
    itr_details: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload ITR Acknowledgment pdf', title='Acknowledgments'
    )


class RootPassportInstructionPassport(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    instruction_display: Optional[str] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Photo Instructions - Switzerland</title>\n</head>\n<body style="margin: 0; font-family: Arial, sans-serif;">\n\n<!-- Full width wrapper with 10% left and right padding -->\n<div style="width: 100%;">\n\n    <!-- Main card-style container -->\n    <div style="background: white; border-radius: 0px; border: 1px solid #ccc; width: 100%; padding: 20px; box-sizing: border-box;">\n\n        <!-- Requirements Section -->\n        <div style="margin-top: 30px;">\n\n            <div style="margin-bottom: 20px;">\n                <h3 style="color: #0073cf; margin-top: 0;"></h3>\n                <ul style="line-height: 1.6; padding-left: 20px; margin-top: 10px;">\n                    <li>Minimum Validity of 6 months from the date of Departure from Swiss.</li>\n                    <li>Hand written passports are not accepted.</li>\n                    <li>The passport should not have any damages – For example: Water marks, torn pages, peeling of Lamination, Spelling mistake in the given name and surname.</li>\n                    <li>The passport should not have any observation in the passport like ECR/ Change inPlace of birth/ Spouse name/ applicant Surname and given name/ Change of address.</li>\n                    <li>Old Passports in Original (If applicable)</li>\n                </ul>\n            </div>\n     \n<!-- \no Minimum Validity of 6 months from the date of Departure from Swiss.\no Hand written passports are not accepted.\no The passport should not have any damages – For example: Water marks, torn\npages, peeling of Lamination, Spelling mistake in the given name and surname.\no The passport should not have any observation in the passport like ECR/ Change in\nPlace of birth/ Spouse name/ applicant Surname and given name/ Change of\naddress.\no Old Passports in Original (If applicable)\n -->\n<!-- \n            <div style="margin-bottom: 20px;">\n                <h3 style="color: #0073cf; margin-top: 0;">The photographs must:</h3>\n                <ul style="line-height: 1.6; padding-left: 20px; margin-top: 10px;">\n                    <li>show you looking directly at the camera</li>\n                    <li>show your skin tones naturally</li>\n                    <li>have appropriate brightness and contrast</li>\n                    <li>be printed on high quality paper, and at high resolution</li>\n                </ul>\n                <p style="margin-top: 10px;">\n                    Photographs taken with a digital camera must be high quality colour and printed on photo-quality paper.\n                </p>\n            </div> -->\n\n        </div>\n\n    </div>\n\n</div>\n\n</body>\n</html>\n',
        title='Display Field',
    )


class RootPassportPassportDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    first_name: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.name',
        description='Enter Given Name as in Passport',
        title='Given Name as in Passport',
    )
    surname: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.surname',
        description='Enter Surname as in Passport',
        title='Surname as in Passport',
    )
    date_of_birth: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Birth as in Passport'
    )
    passport_number: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.uid',
        description='Enter Passport Number',
        title='Passport Number',
    )
    date_of_issue: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Issue'
    )
    date_of_expiry: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Expiry'
    )
    gender: Optional[GENDER] = Field(None, description='Select Option', title='Gender')
    place_of_issue: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.place_of_issue',
        description='Enter Place of Issue',
        title='Place of Issue',
    )
    nationality: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.nationality',
        description='Enter Nationality',
        title='Nationality',
    )
    issued_by: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.place_of_issue',
        description='Enter Issued By (Authority/City)',
        title='Issued By (Authority/City)',
    )
    father_name: Optional[str] = Field(
        None, description="Enter Father's Name", title="Father's Name"
    )
    mother_name: Optional[str] = Field(
        None, description="Enter Mother's Name", title="Mother's Name"
    )
    spouse_name: Optional[str] = Field(
        None, description="Enter Spouse' Name", title="Spouse' Name"
    )
    civil_status: Optional[str] = Field(
        None, description='Enter Civil/Marital Status', title='Civil/Marital Status'
    )
    address_line_1: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.full_address',
        description='Enter Address Line 1',
        title='Address Line 1',
    )
    address_line_2: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.address_line_2',
        description='Enter Address Line 2',
        title='Address Line 2',
    )
    pin_code: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.postal_code',
        description='Enter PIN Code',
        title='PIN Code',
    )
    city: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.city',
        description='Enter City',
        title='City',
    )
    state: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.state',
        description='Enter State',
        title='State',
    )
    country: Optional[str] = Field(
        '@.passport_page_upload.TRUSTED_OVD.code',
        description='Enter Country',
        title='Country',
    )
    desired_validity: Optional[str] = Field(
        '6',
        description='This is the minimum duration for which the passport should be valid',
        title='',
    )


class RootPassportPassportPageUpload(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type_of_passport: Optional[PASSPORTTYPE] = Field(
        None, description='Select Option', title='Type of Passport'
    )
    ovd_front: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Front Page of Passport', title='Front Page of Passport'
    )
    ovd_back: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Back Page of Passport', title='Back Page of Passport'
    )


class RootPhotographInstructions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    instruction_display: Optional[str] = Field(
        None,
        description='<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>Photo Instructions - Switzerland</title>\n</head>\n<body style="margin: 0; font-family: Arial, sans-serif;">\n\n<!-- Full width wrapper with 10% left and right padding -->\n<div style="width: 100%; box-sizing: border-box;">\n\n    <!-- Main card-style container -->\n    <div style="background: white; border-radius: 10px; border: 1px solid #ccc; width: 100%; padding: 20px; box-sizing: border-box;">\n\n        <!-- <h2 style="color: #002b7f; text-align: center; margin-top: 0;">Instructions</h2> -->\n        <p style="text-align: center; color: #0073cf; font-weight: bold; margin-top: 0;">\n            (From the Government of Switzerland)\n        </p>\n\n        <div style="display: flex; flex-wrap: wrap; justify-content: center; margin-top: 20px;">\n\n            <!-- Photo Boxes -->\n            <div style="margin-bottom: 20px; text-align: center;">\n                <img src="https://d2phdgmkbm5x8b.cloudfront.net/img/schengen-passport-photo-01.webp" alt="Too Close" style="width: 100%; border: 1px solid #ccc; border-radius: 5px;">\n            </div>\n\n        </div>\n\n        <!-- Requirements Section -->\n        <div style="margin-top: 30px;">\n\n            <div style="margin-bottom: 20px;">\n                <h3 style="color: #0073cf; margin-top: 0;">Photograph quality</h3>\n                <ul style="line-height: 1.6; padding-left: 20px; margin-top: 10px;">\n                    <li>Be no more than 6-months old</li>\n                    <li>35–40mm in width</li>\n                    <li>Close up of your head and top of your shoulders so that your face takes up 70–80% of the photograph</li>\n                    <li>In sharp focus and clear</li>\n                    <li>Of high quality with no ink marks or creases</li>\n                </ul>\n            </div>\n\n            <div style="margin-bottom: 20px;">\n                <h3 style="color: #0073cf; margin-top: 0;">The Photographs Must:</h3>\n                <ul style="line-height: 1.6; padding-left: 20px; margin-top: 10px;">\n                    <li>Show you looking directly at the camera</li>\n                    <li>Show your skin tones naturally</li>\n                    <li>Have appropriate brightness and contrast</li>\n                    <li>Be printed on high quality paper, and at high resolution</li>\n                </ul>\n                <p style="margin-top: 10px;">\n                    Photographs taken with a digital camera must be high quality colour and printed on photo-quality paper.\n                </p>\n            </div>\n\n        </div>\n\n    </div>\n\n</div>\n\n</body>\n</html>\n',
        title='Display Field',
    )


class RootPhotographPassportPhoto(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload_photo_display: Optional[str] = Field(
        None,
        description='<h2 style="font-family: Arial, sans-serif; font-size: 14px; color: #333;">\n    Upload a passport photo that has been taken not more than 6 months ago & have a clear resemblance to you.\n</h2>\n',
        title='Display Field',
    )
    photo: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Photo', title='Upload Photo'
    )
    print_photograpth: Optional[PRINTPHOTO] = Field(
        None, description='Select Option', title=''
    )


class RootPreviousVisasPreviousBiometrics(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    date_of_biometrics: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Biometrics provided Earlier'
    )
    visa_sticker_number: Optional[str] = Field(
        None, description='Enter Visa Sticker Number', title='Visa Sticker Number'
    )


class RootPreviousVisasPreviousSchengenVisa(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    option_1: Optional[OPTION] = Field(
        'NO',
        description='Select Option',
        title='Have you been issued a Schengen visa during the past 3 years?',
    )
    option_2: Optional[OPTION] = Field(
        'NO',
        description='Select Option',
        title='Have you been issued a Schengen visa in the past?',
    )
    option_3: Optional[OPTION2] = Field(
        'NO',
        description='Select Option',
        title='Have your fingerprints been collected previously while applying for a Schengen Visa?',
    )


class RootPreviousVisasPreviousVisaUploadsOlderPreviousschengenvisauploadVisaDetails(
    BaseModel
):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_file: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Visa', title='Upload Visa'
    )
    visa_number: Optional[str] = Field(
        None, description='Enter Visa Number', title='Visa Number'
    )
    visa_type: Optional[str] = Field(
        None, description='Enter Visa Type', title='Visa Type'
    )
    country_of_issue: Optional[COUNTRY] = Field(
        None, description='Select Country of issue', title='Country of Visa issued from'
    )
    start_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Entry'
    )
    end_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Exit'
    )
    purpose_of_visa: Optional[PURPOSEOFVISAORTRAVEL] = Field(
        None, description='Select Option', title='Purpose of Travel'
    )
    other_purpose: Optional[str] = Field(
        None, description='Enter Other purpose', title='Other purpose'
    )
    utlized_visa: Optional[OPTION] = Field(
        'YES',
        description='Select Option',
        title='Have you utilized this visa for Travel?',
    )
    country_of_travel: Optional[COUNTRY] = Field(
        None, description='Select Country of travel', title='Country of Travel'
    )


class RootPreviousVisasPreviousVisaUploadsPreviousschengenvisauploadVisaDetails(
    BaseModel
):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_file: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Visa', title='Upload Visa'
    )
    visa_number: Optional[str] = Field(
        None, description='Enter Visa Number', title='Visa Number'
    )
    visa_type: Optional[str] = Field(
        None, description='Enter Visa Type', title='Visa Type'
    )
    country_of_issue: Optional[COUNTRY] = Field(
        None, description='Select Country of issue', title='Country of Visa issued from'
    )
    start_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Entry'
    )
    end_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Exit'
    )
    purpose_of_visa: Optional[PURPOSEOFVISAORTRAVEL] = Field(
        None, description='Select Option', title='Purpose of Travel'
    )
    other_purpose: Optional[str] = Field(
        None, description='Enter Other purpose', title='Other purpose'
    )
    utlized_visa: Optional[OPTION] = Field(
        'YES',
        description='Select Option',
        title='Have you utilized this visa for Travel?',
    )
    country_of_travel: Optional[COUNTRY] = Field(
        None, description='Select Country of travel', title='Country of Travel'
    )


class RootResidentialAddressResidentialAddressCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type_of_proof: Optional[ADDRESSPROOFTYPE] = Field(
        None, description='Select Option', title='Type of Proof'
    )
    address_proof_upload: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Address Proof', title='Upload Address Proof'
    )
    address_line_1: Optional[str] = Field(
        None, description='Enter Address Line 1', title='Address Line 1'
    )
    address_line_2: Optional[str] = Field(
        None, description='Enter Address Line 2', title='Address Line 2'
    )
    pin_code: Optional[str] = Field(
        None, description='Enter PIN Code', title='PIN Code'
    )
    city: Optional[str] = Field(None, description='Enter City', title='City')
    state: Optional[str] = Field(None, description='Enter State', title='State')
    country: Optional[str] = Field(None, description='Enter Country', title='Country')


class RootResidentialAddressWorkAddressCard(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    employer_name: Optional[str] = Field(
        None, description='Enter Name of the Employer', title='Name of the Employer'
    )
    occupation: Optional[str] = Field(
        None, description='Enter Current Occupation', title='Current Occupation'
    )
    date_of_joining: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Joining'
    )
    work_address_line_1: Optional[str] = Field(
        None, description='Enter Address Line 1', title='Address Line 1'
    )
    work_address_line_2: Optional[str] = Field(
        None, description='Enter Address Line 2', title='Address Line 2'
    )
    work_pin_code: Optional[str] = Field(
        None, description='Enter Pin Code', title='Pin Code'
    )
    work_city: Optional[str] = Field(None, description='Enter City', title='City')
    work_state: Optional[str] = Field(None, description='Enter State', title='State')
    work_country: Optional[str] = Field(
        None, description='Enter Country', title='Country'
    )
    work_phone: Optional[str] = Field(
        None,
        description='Enter Work Phone Number of Employer',
        title='Work Phone Number of Employer',
    )


class RootSalarySlipPrevEmployerSlipsPreviousemployersalaryslipsEmploymentDetails(
    BaseModel
):
    model_config = ConfigDict(
        extra='allow',
    )
    name_of_employer: Optional[str] = Field(
        None, description='Enter Name of Employer', title='Name of Employer'
    )
    occupation: Optional[str] = Field(
        None, description='Enter Occupation', title='Occupation'
    )
    address_of_employer: Optional[str] = Field(
        None, description='Enter Address of Employer', title='Address of Employer'
    )
    month: Optional[MONTHOPTION] = Field(
        None, description='Select Option', title='Month'
    )
    year: Optional[YEAROPTION] = Field(None, description='Select Option', title='Year')


class RootSalarySlipSlipsSalaryslipsEmploymentDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name_of_employer: Optional[str] = Field(
        None, description='Enter Name of Employer', title='Name of Employer'
    )
    occupation: Optional[str] = Field(
        None, description='Enter Occupation', title='Occupation'
    )
    address_of_employer: Optional[str] = Field(
        None, description='Enter Address of Employer', title='Address of Employer'
    )
    month: Optional[MONTHOPTION] = Field(
        None, description='Select Option', title='Month'
    )
    year: Optional[YEAROPTION] = Field(None, description='Select Option', title='Year')


class RootTicketingBookConfirmedTicket(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    given_name: Optional[str] = Field(
        None, description='Enter Given Name', title='Given Name'
    )
    surname: Optional[str] = Field(None, description='Enter Surname', title='Surname')
    passport_number: Optional[str] = Field(
        None, description='Enter Passport Number', title='Passport Number'
    )
    country: Optional[str] = Field(None, description='Enter Country', title='Country')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    date_of_arrival: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Arrival'
    )
    date_of_departure: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Departure'
    )
    disclaimer: Optional[str] = Field(
        None,
        description='Disclaimer - By choosing TTK to prepare a confirmed hotel accomodation, you acknowledge that this accomodation is a confirmed hotel accomodation booking. I confirm and agree to pay additional charges for this confirmed hotel accomodation per country (as applicable) along with the actual hotel accomodation cost.',
        title='Display Field',
    )


class RootTicketingBookDummyTicket(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    given_name: Optional[str] = Field(
        None, description='Enter Given Name', title='Given Name'
    )
    surname: Optional[str] = Field(None, description='Enter Surname', title='Surname')
    passport_number: Optional[str] = Field(
        None, description='Enter Passport Number', title='Passport Number'
    )
    country: Optional[str] = Field(None, description='Enter Country', title='Country')
    city: Optional[str] = Field(None, description='Enter City', title='City')
    date_of_arrival: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Arrival'
    )
    date_of_departure: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Departure'
    )
    disclaimer: Optional[str] = Field(
        None,
        description='Disclaimer - By choosing TTK to prepare a dummy hotel accomodation, you acknowledge that this dummy accomodation is for visa application purposes only and is not a confirmed hotel/ accomodation booking. I confirm and agree to pay additional charges for this dummy accomodation per country (as applicable).',
        title='Display Field',
    )


class RootTravelInsuranceInsuranceDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name_of_nominee: Optional[str] = Field(
        None, description='Enter Name of Nominee', title='Name of Nominee'
    )
    nominee_relationship: Optional[int] = Field(
        None, description='Enter Relationship', title='Relationship'
    )
    plan: Optional[INSURANCEPLAN] = Field(
        'USD50K', description='Select plan', title='Insurance Plan'
    )
    pre_existing_disease: Optional[OPTION] = Field(
        'YES', description='Select if any disease', title='Any pre-existing Disease?'
    )
    pre_existing_disease_details: Optional[str] = Field(
        None,
        description='Enter Details of Pre-Existing Disease',
        title='Details of Pre-Existing Disease',
    )


class RootVisaRequestInformationContactDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    mobile_number: Optional[str] = Field(
        None, description='Enter Mobile Number', title='Mobile Number'
    )
    email_id: Optional[str] = Field(
        None, description='Enter Email ID', title='Email ID'
    )


class RootVisaRequestInformationVisaRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    from_country: Optional[str] = Field(
        None, description='Enter From Country', title='From Country'
    )
    to_country: Optional[str] = Field(
        None, description='Enter To Country', title='To Country'
    )
    visa_type: Optional[VISATYPE] = Field(
        None, description='Select Option', title='Visa Type'
    )
    departure_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Departure Date'
    )
    arrival_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Arrival Date'
    )
    length_of_stay: Optional[int] = Field(
        None, description='Enter Length of Stay', title='Length of Stay'
    )
    validity: Optional[int] = Field(
        None, description='Enter Validity', title='Validity'
    )
    no_of_entries: Optional[int] = Field(
        None, description='Enter No of Entries', title='No of Entries'
    )
    visa_mode: Optional[VISAMODE] = Field(
        None, description='Select Option', title='Visa Mode'
    )
    state_of_residence: Optional[INDIASTATES] = Field(
        None, description='Select Option', title='Your State/Province of Residence'
    )
    visa_processing_type: Optional[VISAPROCESSINGTYPE] = Field(
        'Normal', description='Select Option', title='Visa Processing Type'
    )
    visa_processing_duration: Optional[str] = Field(
        None,
        description='Enter Visa Processing Duration',
        title='Visa Processing Duration',
    )
    earliest_appointment_availability: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Earliest Appointment Availability'
    )
    appointment_availability_location: Optional[str] = Field(
        None, description='Enter Appointment Location', title='Appointment Location'
    )
    visa_cost: Optional[str] = Field(
        None,
        description='Enter Updated Embassy Fee Amount',
        title='Updated Embassy Fee Amount',
    )
    traveller_type: Optional[str] = Field(
        None,
        description='Enter Primary Traveller or Not',
        title='Primary Traveller or Not',
    )
    order_id: Optional[str] = Field(
        None, description='Enter Order ID', title='Order ID'
    )
    visa_cost_consent: Optional[CONSENTVISAFEE] = Field(
        None, description='Select Option', title=''
    )


class RootVisaStatusStatus(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_status: Optional[VISASTATUS] = Field(
        None, description='Select Option', title='Status of Your Visa'
    )
    rejection_document: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Enter Upload Visa Rejection Document',
        title='Upload Visa Rejection Document',
    )
    remarks: Optional[str] = Field(None, description='Enter Remarks', title='Remarks')
    visa_file: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Visa', title='Upload Visa'
    )
    visa_number: Optional[str] = Field(
        None, description='Enter Visa Number', title='Visa Number'
    )
    visa_type: Optional[str] = Field(
        None, description='Enter Visa Type', title='Visa Type'
    )
    country_of_issue: Optional[COUNTRY] = Field(
        None, description='Select Option', title='Country of Visa Issued from'
    )
    start_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Start Date of Visa'
    )
    end_date: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='End Date of Visa'
    )


class RootVisaSubmissionSubmission(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    submission_reference_id: Optional[str] = Field(
        None,
        description='Enter Visa Submission Reference ID',
        title='Visa Submission Reference ID',
    )
    date_of_filing: Optional[date] = Field(
        None, description='DD/MM/YYYY', title='Date of Filing'
    )
    tracking_url: Optional[str] = Field(
        None, description='Enter Tracking Reference URL', title='Tracking Reference URL'
    )


class RootAdditionalDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    national_id: Optional[RootAdditionalDetailsNationalId] = Field(
        None, title='National Identification Number'
    )
    other_country_travel: Optional[RootAdditionalDetailsOtherCountryTravel] = Field(
        None, title='Travelling to Multiple Countries during this trip'
    )
    application_detail: Optional[RootAdditionalDetailsApplicationDetail] = Field(
        None, title='Application Details'
    )
    family_member_of_eu: Optional[RootAdditionalDetailsFamilyMemberOfEu] = Field(
        None, title='Family Member of EU/EEA/Swiss/UK National'
    )
    sponsorship_details: Optional[RootAdditionalDetailsSponsorshipDetails] = Field(
        None, title='Sponsorship Details'
    )


class RootAddons(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    addons_view: Optional[RootAddonsAddonsView] = Field(None, title='Addons List')


class RootAppointment(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    earliest_available_appointment: Optional[
        RootAppointmentEarliestAvailableAppointment
    ] = Field(None, title='Earliest Available Appointment')
    appointment_preferance: Optional[RootAppointmentAppointmentPreferance] = Field(
        None, title='Appointment Preference'
    )
    appointment_locations: Optional[RootAppointmentAppointmentLocations] = Field(
        None, title='Suggested Location & Appointment'
    )
    appointment_lovations_earliest: Optional[
        RootAppointmentAppointmentLovationsEarliest
    ] = Field(None, title='Suggested Location & Appointment')
    appointment_scheduled: Optional[RootAppointmentAppointmentScheduled] = Field(
        None, title='Scheduled Appointment'
    )
    cancel_appointment: Optional[RootAppointmentCancelAppointment] = Field(
        None, title='Cancel/Reschedule Appointment'
    )


class RootAttachmentsInfopaneAttachDocumentsAttachmentgroup(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    attachment: Optional[
        RootAttachmentsInfopaneAttachDocumentsAttachmentgroupAttachment
    ] = Field(None, title='Attach Document')


class RootBankStatementStatementsBankstatementgroup(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    bank_statement_file: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Upload your bank statement PDF',
        title='Upload Bank Statement',
    )
    account_details: Optional[
        RootBankStatementStatementsBankstatementgroupAccountDetails
    ] = Field(None, title='Account Details')


class RootCredentialsSecurityQuestionsSecurityquestiongroup(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    security_question: Optional[
        RootCredentialsSecurityQuestionsSecurityquestiongroupSecurityQuestion
    ] = Field(None, title='Security Questions')


class RootDeclarations(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_declaration: Optional[RootDeclarationsVisaDeclaration] = Field(
        None, title='Visa Declaration'
    )


class RootDownloads(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    card_builder: Optional[RootDownloadsCardBuilder] = Field(None, title='Docket')


class RootItineraryAccomodationItineraryDetailsItinerarygroup(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    itinerary_information: Optional[
        RootItineraryAccomodationItineraryDetailsItinerarygroupItineraryInformation
    ] = Field(None, title='Itinerary Details')
    book_confirmed_accomodation: Optional[
        RootItineraryAccomodationItineraryDetailsItinerarygroupBookConfirmedAccomodation
    ] = Field(None, title='Book Confirmed Accomodation with TTK')
    book_dummy_accomodation: Optional[
        RootItineraryAccomodationItineraryDetailsItinerarygroupBookDummyAccomodation
    ] = Field(None, title='Book Dummy Accomodation with TTK')
    inviter_details: Optional[
        RootItineraryAccomodationItineraryDetailsItinerarygroupInviterDetails
    ] = Field(None, title='Inviter Details')


class RootPassport(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    instruction_passport: Optional[RootPassportInstructionPassport] = Field(
        None, title='Original Passport'
    )
    passport_page_upload: Optional[RootPassportPassportPageUpload] = Field(
        None, title='Passport Photo Upload'
    )
    passport_details: Optional[RootPassportPassportDetails] = Field(
        None, title='Passport Details'
    )


class RootPhotograph(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    instructions: Optional[RootPhotographInstructions] = Field(
        None, title='Instructions'
    )
    passport_photo: Optional[RootPhotographPassportPhoto] = Field(
        None, title='Passport Photo'
    )


class RootPreviousVisasPreviousVisaUploadsOlderPreviousschengenvisaupload(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_details: Optional[
        RootPreviousVisasPreviousVisaUploadsOlderPreviousschengenvisauploadVisaDetails
    ] = Field(None, title='Visa Details')


class RootPreviousVisasPreviousVisaUploadsPreviousschengenvisaupload(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_details: Optional[
        RootPreviousVisasPreviousVisaUploadsPreviousschengenvisauploadVisaDetails
    ] = Field(None, title='Visa Details')


class RootResidentialAddress(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload_display_residential_address: Optional[str] = Field(
        None,
        description='<h2 style="font-family: Arial, sans-serif; font-size: 14px; color: #333;">\n    Upload the evidence of your legal residence in the country you are applying from\n</h2>',
        title='Display Field',
    )
    same_as_passport_address: Optional[SAMEASPASSADDR] = Field(
        None, description='Select Option', title=''
    )
    residential_address_card: Optional[
        RootResidentialAddressResidentialAddressCard
    ] = Field(None, title='Current Residential Address')
    work_address_card: Optional[RootResidentialAddressWorkAddressCard] = Field(
        None, title='Current Work Address / Name of the Institute / Organization'
    )


class RootSalarySlipPrevEmployerSlipsPreviousemployersalaryslips(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload_salary_slip: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Salary Slip', title='Upload Salary Slip'
    )
    employment_details: Optional[
        RootSalarySlipPrevEmployerSlipsPreviousemployersalaryslipsEmploymentDetails
    ] = Field(None, title='Previous Employment Details')


class RootSalarySlipSlipsSalaryslips(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    upload_salary_slip: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Salary Slip', title='Upload Salary Slip'
    )
    employment_details: Optional[
        RootSalarySlipSlipsSalaryslipsEmploymentDetails
    ] = Field(None, title='Employment Details')


class RootTicketing(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    same_as_primary_traveller: Optional[SAMEASPRIMARYTRAVELLER] = Field(
        None, description='Select Option', title=''
    )
    flight_ticket_option: Optional[FLIGHTTICKETOPTION] = Field(
        'HAVE_CONFIRMED_TICKET', description='Select Option', title=''
    )
    upload_confirmed_ticket: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Enter Upload Confirmed Ticket',
        title='Upload Confirmed Ticket',
    )
    upload_dummy_ticket: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Dummy Ticket', title='Upload Dummy Ticket'
    )
    book_confirmed_ticket: Optional[RootTicketingBookConfirmedTicket] = Field(
        None, title='Book Confirmed Flight Ticket'
    )
    book_dummy_ticket: Optional[RootTicketingBookDummyTicket] = Field(
        None, title='Book Dummy Flight Ticket'
    )


class RootTravelInsurance(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    same_as_primary_traveller: Optional[SAMEASPRIMARYTRAVELLER] = Field(
        None, description='Select Option', title=''
    )
    insurance_options: Optional[INSURANCEOPTION] = Field(
        'HAVE_INSURANCE', description='Select Option', title=''
    )
    insurance_document: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Upload insurance document pdf', title='Insurance Document'
    )
    insurance_details: Optional[RootTravelInsuranceInsuranceDetails] = Field(
        None, title='Insurance Details'
    )


class RootVisaRequestInformation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_request: Optional[RootVisaRequestInformationVisaRequest] = Field(
        None, title='Visa Request'
    )
    contact_details: Optional[RootVisaRequestInformationContactDetails] = Field(
        None, title='Contact Details'
    )


class RootVisaStatus(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    status: Optional[RootVisaStatusStatus] = Field(None, title='Visa Status')


class RootVisaSubmission(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    submission: Optional[RootVisaSubmissionSubmission] = Field(
        None, title='Visa Submission'
    )


class FieldGrpRootAttachmentsInfopaneAttachDocuments(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    attachmentgroup: Optional[
        RootAttachmentsInfopaneAttachDocumentsAttachmentgroup
    ] = Field(None, title='Nominee')


class FieldGrpRootBankStatementStatements(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    bankstatementgroup: Optional[RootBankStatementStatementsBankstatementgroup] = Field(
        None, title='Info Pane Builder'
    )


class FieldGrpRootCredentialsSecurityQuestions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    securityquestiongroup: Optional[
        RootCredentialsSecurityQuestionsSecurityquestiongroup
    ] = Field(None, title='Info Pane Builder')


class FieldGrpRootItineraryAccomodationItineraryDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    itinerarygroup: Optional[
        RootItineraryAccomodationItineraryDetailsItinerarygroup
    ] = Field(None, title='Itinerary')


class FieldGrpRootPreviousVisasPreviousVisaUploads(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    previousschengenvisaupload: Optional[
        RootPreviousVisasPreviousVisaUploadsPreviousschengenvisaupload
    ] = Field(None, title='Info Pane Builder')


class FieldGrpRootPreviousVisasPreviousVisaUploadsOlder(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    previousschengenvisaupload: Optional[
        RootPreviousVisasPreviousVisaUploadsOlderPreviousschengenvisaupload
    ] = Field(None, title='Info Pane Builder')


class FieldGrpRootSalarySlipPrevEmployerSlips(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    previousemployersalaryslips: Optional[
        RootSalarySlipPrevEmployerSlipsPreviousemployersalaryslips
    ] = Field(None, title='Info Pane Builder')


class FieldGrpRootSalarySlipSlips(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    salaryslips: Optional[RootSalarySlipSlipsSalaryslips] = Field(
        None, title='Info Pane Builder'
    )


class RootAttachmentsInfopane(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    attach_documents: Optional[
        List[FieldGrpRootAttachmentsInfopaneAttachDocuments]
    ] = Field(None, title='Attached Documents')


class RootBankStatement(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    skip_upload: Optional[SKIPBANKSTATEMENT] = Field(
        None, description='Select Option', title=''
    )
    statements: Optional[List[FieldGrpRootBankStatementStatements]] = Field(
        None, title='Group Builder'
    )


class RootCredentials(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    credentials: Optional[RootCredentialsCredentials] = Field(None, title='Credentials')
    security_questions: Optional[
        List[FieldGrpRootCredentialsSecurityQuestions]
    ] = Field(None, title='Group Builder')


class RootItineraryAccomodation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    same_as_primary_traveller: Optional[SAMEASPRIMARYTRAVELLER] = Field(
        None, description='Select Option', title=''
    )
    itinerary_option: Optional[ITINERARYOPTION] = Field(
        'HAVE_ITINERARY', description='Select Option', title=''
    )
    upload_itinerary: Optional[Union[str, Dict[str, Any]]] = Field(
        None, description='Enter Upload Itinerary', title='Upload Itinerary'
    )
    itinerary_details: Optional[
        List[FieldGrpRootItineraryAccomodationItineraryDetails]
    ] = Field(None, title='Itinerary')


class RootPreviousVisas(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    previous_schengen_visa: Optional[RootPreviousVisasPreviousSchengenVisa] = Field(
        None, title='Previous Schengen Visas (if applicable)'
    )
    previous_visa_uploads: Optional[
        List[FieldGrpRootPreviousVisasPreviousVisaUploads]
    ] = Field(None, title='Group Builder')
    previous_visa_uploads_older: Optional[
        List[FieldGrpRootPreviousVisasPreviousVisaUploadsOlder]
    ] = Field(None, title='Group Builder')
    previous_biometrics: Optional[RootPreviousVisasPreviousBiometrics] = Field(
        None, title='Previous Biometrics'
    )


class RootSalarySlip(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    skip_salary: Optional[SKIPSALARY] = Field(
        None, description='Select Option', title=''
    )
    slips: Optional[List[FieldGrpRootSalarySlipSlips]] = Field(
        None, title='Group Builder'
    )
    previous_employer: Optional[ADDPREVIOUSEMPSALARY] = Field(
        None, description='Select Option', title=''
    )
    prev_employer_slips: Optional[
        List[FieldGrpRootSalarySlipPrevEmployerSlips]
    ] = Field(None, title='Group Builder')


class Schengentouristvisa(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    visa_request_information: Optional[RootVisaRequestInformation] = Field(
        None, title='Visa Request information'
    )
    appointment: Optional[RootAppointment] = Field(None, title='Appointment Details')
    cotraveller: Optional[RootCotraveller] = Field(None, title='Co-Traveller')
    passport: Optional[RootPassport] = Field(None, title='Passport')
    photograph: Optional[RootPhotograph] = Field(None, title='Photograph')
    residential_address: Optional[RootResidentialAddress] = Field(
        None, title='Address Documents'
    )
    itinerary_accomodation: Optional[RootItineraryAccomodation] = Field(
        None, title='Itinerary and Accomodation'
    )
    ticketing: Optional[RootTicketing] = Field(None, title='Ticketing')
    travel_insurance: Optional[RootTravelInsurance] = Field(
        None, title='Travel Insurance'
    )
    previous_visas: Optional[RootPreviousVisas] = Field(None, title='Previous Visas')
    additional_details: Optional[RootAdditionalDetails] = Field(
        None, title='Additional Travel Details'
    )
    salary_slip: Optional[RootSalarySlip] = Field(None, title='Salary Slips')
    bank_statement: Optional[RootBankStatement] = Field(None, title='Bank Statements')
    itr_acknowledgement: Optional[RootItrAcknowledgement] = Field(
        None, title='ITR Acknowledgement'
    )
    attachments_infopane: Optional[RootAttachmentsInfopane] = Field(
        None, title='Attachments'
    )
    declarations: Optional[RootDeclarations] = Field(None, title='Declarations')
    addons: Optional[RootAddons] = Field(None, title='Addons')
    downloads: Optional[RootDownloads] = Field(None, title='Downloads (Docket)')
    credentials: Optional[RootCredentials] = Field(None, title='Credentials')
    briefing_call: Optional[RootBriefingCallsBriefingcallgroupBriefingCall] = Field(
        None, title='Briefing Call'
    )
    visa_submission: Optional[RootVisaSubmission] = Field(None, title='Visa Submission')
    visa_status: Optional[RootVisaStatus] = Field(None, title='Visa Status')
